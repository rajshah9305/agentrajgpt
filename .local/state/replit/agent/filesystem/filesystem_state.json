{"file_contents":{"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"replit.md":{"content":"# RAJGPT - Elite AI Orchestration Platform\n\n## Overview\n\nRAJGPT is a production-grade multi-agent AI orchestration system that combines 5 specialized AI agents working in real-time to accomplish complex goals. Built with TypeScript, React, and PostgreSQL, it features live visualization, task execution monitoring, and comprehensive analytics.\n\n## Current State\n\n**Status**: MVP Complete ✅  \n**Last Updated**: October 21, 2025\n\nThe application is fully functional with all core features implemented:\n- Multi-agent orchestration with 5 specialized agents\n- Real-time WebSocket updates for live execution monitoring\n- PostgreSQL database with complete persistence\n- Beautiful dark-mode UI with responsive design\n- Analytics dashboard with performance metrics\n- Complete API for execution management\n\n## Recent Changes\n\n### October 21, 2025 - Initial Implementation\n- Built complete schema with executions, tasks, agent logs, and tool usage tables\n- Implemented 5 AI agents: Planner, Executor, Researcher, Coder, Analyst\n- Created orchestrator for coordinating agent execution\n- Built WebSocket server for real-time updates\n- Designed stunning UI with agent color coding and live visualizer\n- Implemented analytics dashboard with charts\n- Set up PostgreSQL database with Drizzle ORM\n\n## Project Architecture\n\n### Tech Stack\n\n**Frontend**:\n- React with TypeScript\n- Tailwind CSS for styling\n- Shadcn UI components\n- React Query for state management\n- Wouter for routing\n- Recharts for analytics visualization\n- WebSocket client for real-time updates\n\n**Backend**:\n- Express.js with TypeScript\n- PostgreSQL (Neon) database\n- Drizzle ORM for database operations\n- WebSocket server for real-time communication\n- OpenAI GPT-5 (or compatible API) for agent intelligence\n\n### Agent System\n\n**Planner Agent** (Purple):\n- Breaks down complex goals into actionable subtasks\n- Assigns tasks to appropriate agents\n- Creates execution plans\n\n**Executor Agent** (Cyan):\n- Performs general operations and API calls\n- Handles file operations and data processing\n- Executes system tasks\n\n**Researcher Agent** (Teal):\n- Conducts web searches and data gathering\n- Analyzes research findings\n- Provides comprehensive summaries\n\n**Coder Agent** (Orange):\n- Writes, debugs, and executes code\n- Supports multiple programming languages\n- Provides code explanations\n\n**Analyst Agent** (Magenta):\n- Processes results from other agents\n- Generates insights and recommendations\n- Creates final summaries\n\n### Database Schema\n\n**Executions**: Stores user goals and overall execution results\n**Tasks**: Individual subtasks created by the Planner\n**Agent Logs**: Detailed logs of agent actions and reasoning\n**Tool Usage**: Tracks which tools were used by agents\n\n## User Preferences\n\n- **Theme**: Dark mode by default\n- **Design**: Professional, technical aesthetic with agent color coding\n- **Layout**: Sidebar navigation with dashboard-centric workflow\n\n## Features\n\n### Core Features\n- **Multi-Agent Orchestration**: 5 specialized agents work together to accomplish goals\n- **Real-Time Visualization**: Live agent network visualization with activity indicators\n- **Task Execution Timeline**: Interactive timeline showing task progression\n- **Live Output Window**: Real-time logs and agent reasoning\n- **Analytics Dashboard**: Performance metrics, success rates, and tool usage statistics\n- **Execution History**: Browse and review past executions with detailed results\n\n### UI Components\n- Agent Status Cards with performance metrics\n- Agent Network Visualizer with animated connections\n- Task Input with goal submission\n- Execution Output with syntax highlighting\n- Metrics Cards showing key statistics\n- Timeline view for task execution flow\n\n## Environment Configuration\n\n### Required Environment Variables\n\n```bash\n# Database (auto-configured by Replit)\nDATABASE_URL=\nPGPORT=\nPGUSER=\nPGPASSWORD=\nPGDATABASE=\nPGHOST=\n\n# Session management\nSESSION_SECRET=\n\n# OpenAI API (or compatible endpoint)\nOPENAI_API_KEY=your-api-key-here\nOPENAI_BASE_URL=https://api.openai.com/v1  # Optional: for custom endpoints\nOPENAI_MODEL=gpt-4o-mini  # Optional: default is gpt-4o-mini\n```\n\n### OpenAI-Compatible APIs\n\nRAJGPT is designed to work with OpenAI-compatible API endpoints. You can use:\n- OpenAI's official API\n- Local LLM servers (LM Studio, Ollama with OpenAI compatibility)\n- Cloud providers with OpenAI-compatible endpoints (Together AI, Groq, Fireworks, etc.)\n\n**Important**: To enable the multi-agent system, you must configure:\n1. `OPENAI_API_KEY` - Your API key for the service\n2. `OPENAI_BASE_URL` (optional) - Custom endpoint URL if not using OpenAI's official API\n3. `OPENAI_MODEL` (optional) - Model name to use (defaults to gpt-4o-mini)\n\nWithout these configured, the agents will not be able to process tasks. The UI and infrastructure will work, but executions will fail with an authorization error.\n\n**Example configurations**:\n```bash\n# For OpenAI's official API\nOPENAI_API_KEY=sk-...\nOPENAI_BASE_URL=https://api.openai.com/v1\nOPENAI_MODEL=gpt-4o-mini\n\n# For local Ollama with OpenAI compatibility\nOPENAI_API_KEY=dummy-key\nOPENAI_BASE_URL=http://localhost:11434/v1\nOPENAI_MODEL=llama3.2\n\n# For LM Studio\nOPENAI_API_KEY=dummy-key\nOPENAI_BASE_URL=http://localhost:1234/v1\nOPENAI_MODEL=your-model-name\n\n# For Together AI\nOPENAI_API_KEY=your-together-api-key\nOPENAI_BASE_URL=https://api.together.xyz/v1\nOPENAI_MODEL=meta-llama/Llama-3.3-70B-Instruct-Turbo\n\n# For Groq\nOPENAI_API_KEY=your-groq-api-key\nOPENAI_BASE_URL=https://api.groq.com/openai/v1\nOPENAI_MODEL=llama-3.3-70b-versatile\n```\n\n## Development\n\n### Running the Application\n\n```bash\nnpm run dev\n```\n\nThis starts both the Express backend and Vite frontend on port 5000.\n\n### Database Migrations\n\n```bash\n# Push schema changes to database\nnpm run db:push\n\n# Force push if needed\nnpm run db:push --force\n```\n\n### File Structure\n\n```\n├── client/              # Frontend React application\n│   ├── src/\n│   │   ├── components/  # Reusable UI components\n│   │   ├── pages/       # Page components\n│   │   ├── hooks/       # Custom React hooks\n│   │   └── lib/         # Utilities and helpers\n├── server/              # Backend Express application\n│   ├── agents/          # AI agent implementations\n│   │   ├── base-agent.ts\n│   │   ├── planner-agent.ts\n│   │   ├── executor-agent.ts\n│   │   ├── researcher-agent.ts\n│   │   ├── coder-agent.ts\n│   │   ├── analyst-agent.ts\n│   │   └── orchestrator.ts\n│   ├── db.ts           # Database connection\n│   ├── storage.ts      # Database operations\n│   └── routes.ts       # API routes and WebSocket\n└── shared/             # Shared types and schemas\n    └── schema.ts       # Drizzle schema definitions\n```\n\n## API Endpoints\n\n### Executions\n- `POST /api/executions` - Create new execution\n- `GET /api/executions` - Get all executions\n- `GET /api/executions/:id` - Get execution by ID\n- `GET /api/executions/:id/tasks` - Get tasks for execution\n- `GET /api/executions/:id/logs` - Get logs for execution\n\n### Analytics\n- `GET /api/analytics` - Get performance metrics\n\n### WebSocket\n- `ws://localhost:5000/ws` - Real-time updates\n\n## WebSocket Events\n\n### Client Receives\n\n**execution_update**: Execution status changes\n```json\n{\n  \"type\": \"execution_update\",\n  \"payload\": {\n    \"executionId\": \"uuid\",\n    \"status\": \"planning|executing|completed|failed\",\n    \"currentAgent\": \"planner|executor|researcher|coder|analyst\",\n    \"currentTask\": \"task description\",\n    \"timestamp\": 1234567890\n  }\n}\n```\n\n**task_update**: Task status changes\n```json\n{\n  \"type\": \"task_update\",\n  \"payload\": { ...task object }\n}\n```\n\n**log**: New log entry\n```json\n{\n  \"type\": \"log\",\n  \"payload\": { ...log object }\n}\n```\n\n**agent_performance**: Agent performance update\n```json\n{\n  \"type\": \"agent_performance\",\n  \"payload\": {\n    \"agentType\": \"planner\",\n    \"performance\": {\n      \"tasksCompleted\": 10,\n      \"successRate\": 95,\n      \"avgDuration\": 2500\n    }\n  }\n}\n```\n\n## Design System\n\n### Colors\n\n**Agent Colors**:\n- Planner: `hsl(260 70% 65%)` - Purple\n- Executor: `hsl(200 85% 55%)` - Cyan\n- Researcher: `hsl(150 60% 55%)` - Teal\n- Coder: `hsl(30 85% 60%)` - Orange\n- Analyst: `hsl(280 65% 60%)` - Magenta\n\n**Typography**:\n- Sans: Inter\n- Mono: JetBrains Mono\n- Display: Space Grotesk\n\n### Component Guidelines\n\nFollow the design_guidelines.md file for detailed component usage, spacing, and interaction patterns.\n\n## Known Limitations\n\n- Actual web search requires external API integration (SerpAPI)\n- Code execution is simulated (Piston API integration needed for real execution)\n- Web scraping requires Cheerio.js setup with proper handling\n\n## Future Enhancements\n\n### Next Phase Features\n- Support for custom local LLM endpoints with model switching\n- Automated Jest testing suite for agents and orchestration\n- Agent memory system with learning from past executions\n- Collaborative multi-user support with shared workspaces\n- Advanced retry logic and self-healing agent recovery\n- Real SerpAPI, Cheerio.js, and Piston API integrations\n\n## Deployment\n\nThe application is ready for deployment on Replit. Use the \"Deploy\" button to publish the application.\n\n### Production Considerations\n- Set `OPENAI_API_KEY` in production environment\n- Configure `SESSION_SECRET` for secure sessions\n- Database is automatically managed by Replit\n- WebSocket connections work automatically on Replit deployments\n\n## Support & Contact\n\nFor issues or questions about RAJGPT, please check the design_guidelines.md and this documentation first.\n","size_bytes":9654},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"server/agents/planner-agent.ts":{"content":"import { BaseAgent, type AgentContext, type AgentResult } from \"./base-agent\";\nimport type { AgentType } from \"@shared/schema\";\n\nexport class PlannerAgent extends BaseAgent {\n  constructor() {\n    super(\n      \"planner\",\n      `You are an elite Planner Agent responsible for breaking down complex goals into actionable subtasks.\n      \nYour responsibilities:\n- Analyze the user's goal and understand the requirements\n- Break down the goal into a sequence of concrete, achievable subtasks\n- Assign each subtask to the most appropriate agent: executor, researcher, coder, or analyst\n- Ensure tasks are ordered logically with clear dependencies\n- Create a comprehensive plan that will accomplish the goal\n\nOutput Format (JSON):\n{\n  \"reasoning\": \"Brief explanation of your planning approach\",\n  \"tasks\": [\n    {\n      \"description\": \"Clear, specific task description\",\n      \"agentType\": \"executor | researcher | coder | analyst\",\n      \"dependencies\": []\n    }\n  ]\n}\n\nAvailable Agents:\n- executor: Executes API calls, system tasks, and general operations\n- researcher: Performs web searches, data gathering, and scraping\n- coder: Writes, debugs, and executes code in various languages\n- analyst: Processes data, generates insights, and creates summaries\n\nBe thorough, specific, and ensure the plan will fully achieve the goal.`,\n      []\n    );\n  }\n\n  async execute(context: AgentContext): Promise<AgentResult> {\n    try {\n      const prompt = `Goal: ${context.goal}\n\nCreate a detailed execution plan with specific tasks assigned to appropriate agents.\nEach task should be concrete and achievable by the assigned agent.\n\nRespond with valid JSON only.`;\n\n      const response = await this.callLLM([\n        { role: \"user\", content: prompt },\n      ], {\n        response_format: { type: \"json_object\" },\n      });\n\n      const plan = JSON.parse(response);\n\n      if (!plan.tasks || !Array.isArray(plan.tasks)) {\n        throw new Error(\"Invalid plan format\");\n      }\n\n      return {\n        success: true,\n        result: plan.tasks,\n        reasoning: plan.reasoning || \"Created execution plan\",\n      };\n    } catch (error: any) {\n      return {\n        success: false,\n        error: error.message,\n        reasoning: \"Failed to create execution plan\",\n      };\n    }\n  }\n}\n","size_bytes":2273},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"server/agents/researcher-agent.ts":{"content":"import { BaseAgent, type AgentContext, type AgentResult } from \"./base-agent\";\n\nexport class ResearcherAgent extends BaseAgent {\n  constructor() {\n    super(\n      \"researcher\",\n      `You are an elite Researcher Agent responsible for gathering information through web searches and data analysis.\n\nYour responsibilities:\n- Perform comprehensive web searches\n- Gather relevant information from multiple sources\n- Analyze and synthesize research findings\n- Provide well-structured research summaries\n\nWhen given a research task, identify key information needs and gather comprehensive data.\n\nOutput Format (JSON):\n{\n  \"reasoning\": \"Research approach and methodology\",\n  \"findings\": [\n    {\n      \"source\": \"Information source\",\n      \"data\": \"Key findings\",\n      \"relevance\": \"How this relates to the task\"\n    }\n  ],\n  \"summary\": \"Comprehensive summary of research\"\n}\n\nProvide thorough, accurate research results.`,\n      [\"web_search\", \"data_scraping\"]\n    );\n  }\n\n  async execute(context: AgentContext): Promise<AgentResult> {\n    try {\n      const prompt = `Research Task: ${context.currentTask}\n\nGoal Context: ${context.goal}\n\nConduct comprehensive research on this topic. Since actual web search isn't available in this environment,\nsimulate realistic research findings that would be gathered from web searches and data analysis.\n\nProvide comprehensive, realistic findings that would help achieve the goal.\n\nRespond with valid JSON only.`;\n\n      const response = await this.callLLM([\n        { role: \"user\", content: prompt },\n      ], {\n        response_format: { type: \"json_object\" },\n      });\n\n      const result = JSON.parse(response);\n\n      return {\n        success: true,\n        result: {\n          findings: result.findings || [],\n          summary: result.summary || \"Research completed\",\n        },\n        reasoning: result.reasoning || \"Research conducted\",\n        toolsUsed: [\"web_search\", \"analysis\"],\n      };\n    } catch (error: any) {\n      return {\n        success: false,\n        error: error.message,\n        reasoning: \"Failed to complete research\",\n      };\n    }\n  }\n}\n","size_bytes":2102},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/app-sidebar\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { ThemeToggle } from \"@/components/theme-toggle\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Analytics from \"@/pages/analytics\";\nimport ExecutionDetail from \"@/pages/execution-detail\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/analytics\" component={Analytics} />\n      <Route path=\"/execution/:id\" component={ExecutionDetail} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  const style = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"3rem\",\n  };\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"dark\">\n        <TooltipProvider>\n          <SidebarProvider style={style as React.CSSProperties}>\n            <div className=\"flex h-screen w-full\">\n              <AppSidebar />\n              <div className=\"flex flex-col flex-1 overflow-hidden\">\n                <header className=\"flex items-center justify-between p-4 border-b bg-background\">\n                  <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n                  <ThemeToggle />\n                </header>\n                <main className=\"flex-1 overflow-auto\">\n                  <Router />\n                </main>\n              </div>\n            </div>\n          </SidebarProvider>\n          <Toaster />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1950},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\" | \"system\";\n\ninterface ThemeProviderProps {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n}\n\ninterface ThemeProviderState {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n}\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"dark\",\n  storageKey = \"rajgpt-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\";\n\n      root.classList.add(systemTheme);\n      return;\n    }\n\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};\n","size_bytes":1606},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"design_guidelines.md":{"content":"# RAJGPT Design Guidelines\n\n## Design Approach\n\n**Selected Approach:** Design System-Based (Material Design + Linear-inspired)\n\n**Justification:** RAJGPT is a utility-focused, information-dense application requiring real-time data visualization, clear hierarchies for multi-agent coordination, and professional monitoring interfaces. The design prioritizes efficiency, readability during extended monitoring sessions, and clear visual feedback for complex operations.\n\n**Key Principles:**\n- Data clarity over decoration\n- Real-time feedback through subtle, purposeful animations\n- Professional aesthetic suitable for technical users\n- Clear visual hierarchy for simultaneous agent monitoring\n- Accessibility for extended use sessions\n\n---\n\n## Core Design Elements\n\n### A. Color Palette\n\n**Dark Mode (Primary):**\n- Background Base: `222 15% 9%` (deep charcoal)\n- Surface Elevated: `222 15% 12%` (cards, panels)\n- Surface Higher: `222 15% 15%` (modals, popovers)\n- Border Subtle: `222 10% 20%` (dividers)\n- Border Emphasis: `222 10% 30%` (focused elements)\n\n**Agent Color Coding:**\n- Planner: `260 70% 65%` (vibrant purple)\n- Executor: `200 85% 55%` (bright cyan)\n- Researcher: `150 60% 55%` (teal green)\n- Coder: `30 85% 60%` (warm orange)\n- Analyst: `280 65% 60%` (magenta)\n\n**Semantic Colors:**\n- Success: `142 76% 45%`\n- Warning: `38 92% 50%`\n- Error: `0 84% 60%`\n- Info: `217 91% 60%`\n\n**Text Hierarchy:**\n- Primary Text: `222 10% 95%`\n- Secondary Text: `222 8% 70%`\n- Tertiary Text: `222 8% 50%`\n- Disabled: `222 8% 35%`\n\n**Light Mode:**\n- Background: `222 15% 98%`\n- Surface: `0 0% 100%`\n- Text Primary: `222 15% 15%`\n- Borders: `222 10% 85%`\n\n---\n\n### B. Typography\n\n**Font Families:**\n- **UI Text:** Inter (Google Fonts) - clean, modern, excellent readability\n- **Monospace:** JetBrains Mono (Google Fonts) - code, logs, technical output\n- **Accent:** Space Grotesk (Google Fonts) - headings, agent names\n\n**Type Scale:**\n- Display: 2.5rem / 600 weight (Space Grotesk)\n- H1: 2rem / 600 weight (Space Grotesk)\n- H2: 1.5rem / 600 weight (Space Grotesk)\n- H3: 1.25rem / 600 weight (Inter)\n- Body Large: 1rem / 400 weight (Inter)\n- Body: 0.875rem / 400 weight (Inter)\n- Caption: 0.75rem / 400 weight (Inter)\n- Code: 0.875rem / 400 weight (JetBrains Mono)\n\n**Line Heights:**\n- Headings: 1.2\n- Body: 1.6\n- Code: 1.5\n\n---\n\n### C. Layout System\n\n**Spacing Scale:** Use Tailwind units of **2, 4, 6, 8, 12, 16** for consistent rhythm\n- Micro spacing: `p-2`, `gap-2` (8px)\n- Component internal: `p-4`, `gap-4` (16px)\n- Section spacing: `p-6`, `p-8` (24-32px)\n- Major sections: `p-12`, `p-16` (48-64px)\n\n**Grid System:**\n- Dashboard: 12-column grid with 16px gutters\n- Main content: 2-column split (sidebar 280px + main fluid)\n- Real-time panels: 3-column grid on desktop, stack on mobile\n- Analytics: 4-column metric cards (grid-cols-1 md:grid-cols-2 lg:grid-cols-4)\n\n**Container Widths:**\n- Full dashboard: `max-w-full` with side padding\n- Content sections: `max-w-7xl mx-auto`\n- Modals: `max-w-2xl` for forms, `max-w-4xl` for previews\n\n---\n\n### D. Component Library\n\n**Navigation:**\n- Left sidebar (280px): Fixed, collapsible on mobile\n- Top bar (64px): Logo, global actions, user menu\n- Breadcrumbs: Secondary navigation with agent context\n\n**Agent Dashboard:**\n- **Agent Card:** Rounded corners (rounded-lg), elevation (shadow-lg), color-coded border-l-4\n- **Status Indicators:** Pulsing dot for active, solid for idle, gray for offline\n- **Progress Bars:** Linear with agent color, percentage label, animated fill\n- **Task Timeline:** Vertical timeline with color-coded nodes, connecting lines\n\n**Data Display:**\n- **Metrics Cards:** Grid layout, large numbers, trend indicators, sparklines\n- **Output Windows:** Terminal-style with monospace font, syntax highlighting, auto-scroll\n- **Log Viewer:** Searchable, filterable, with timestamp and severity badges\n- **Code Blocks:** Dark theme, line numbers, copy button, language badge\n\n**Real-Time Visualizer:**\n- **Agent Network Graph:** SVG-based node connections, animated data flow\n- **Task Queue:** Sortable list with drag-drop, priority indicators\n- **Execution Preview:** Modal overlay with live stdout/stderr streams\n\n**Forms & Inputs:**\n- Text inputs: Border focus ring with agent color, clear validation states\n- Buttons: Primary (filled agent color), Secondary (outline), Ghost (transparent)\n- Dropdowns: Custom styled with smooth transitions\n- Toggles: Switch component for enable/disable features\n\n**Overlays:**\n- **Modals:** Centered, backdrop blur, slide-up animation\n- **Toasts:** Top-right notifications, auto-dismiss, icon + message\n- **Tooltips:** Dark background, small arrow, appear on hover (delay 300ms)\n\n---\n\n### E. Animations & Interactions\n\n**Purposeful Animations Only:**\n- Agent status changes: Fade transition (200ms)\n- Real-time data updates: Pulse effect on new data (300ms)\n- Progress indicators: Smooth fill animation (ease-in-out)\n- Loading states: Skeleton screens, not spinners\n- Page transitions: None - instant for data-focused apps\n- Hover states: Subtle scale (1.02) on interactive cards\n\n**Prohibited:**\n- Decorative scroll animations\n- Page parallax effects\n- Excessive micro-interactions\n- Auto-playing media\n\n---\n\n## Page-Specific Guidelines\n\n**Dashboard (Main View):**\n- Top: Metric summary cards (4-column grid)\n- Middle: Agent status grid (3-column) + Live visualizer panel\n- Bottom: Recent activity log + Quick actions sidebar\n- Right sidebar: Task queue with add new goal input\n\n**Agent Detail View:**\n- Hero: Agent name (Space Grotesk), status, performance metrics\n- Tabs: Execution history, Settings, Logs, Analytics\n- Live output window: Full-width terminal-style display\n- Timeline: Vertical task execution flow with expandable details\n\n**Analytics Dashboard:**\n- Filter bar: Date range, agent selection, metric type\n- Charts: Line graphs for performance trends, bar charts for comparisons\n- Tables: Sortable, paginated, with export functionality\n- Summary cards: KPIs with percentage change indicators\n\n---\n\n## Images\n\n**Not Applicable:** RAJGPT is a technical dashboard application focused on real-time data visualization and monitoring. No hero images or marketing imagery needed. All visuals are data-driven (charts, graphs, agent network diagrams, code execution previews).\n\n---\n\n## Accessibility\n\n- WCAG AA contrast ratios (4.5:1 minimum)\n- Keyboard navigation for all interactive elements\n- Screen reader labels for icons and status indicators\n- Focus visible indicators (2px ring with agent color)\n- Reduced motion support via `prefers-reduced-motion`\n- Consistent dark mode implementation across all inputs and surfaces","size_bytes":6629},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/task-input.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Sparkles, Send } from \"lucide-react\";\n\ninterface TaskInputProps {\n  onSubmit: (goal: string) => void;\n  isLoading?: boolean;\n}\n\nexport function TaskInput({ onSubmit, isLoading = false }: TaskInputProps) {\n  const [goal, setGoal] = useState(\"\");\n\n  const handleSubmit = () => {\n    if (goal.trim() && !isLoading) {\n      onSubmit(goal.trim());\n      setGoal(\"\");\n    }\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSubmit();\n    }\n  };\n\n  return (\n    <Card data-testid=\"card-task-input\">\n      <CardHeader className=\"pb-4\">\n        <div className=\"flex items-center gap-2\">\n          <Sparkles className=\"h-5 w-5 text-primary\" />\n          <CardTitle className=\"text-base font-semibold\">New Task</CardTitle>\n        </div>\n        <CardDescription className=\"text-xs\">\n          Describe your goal and let the AI agents orchestrate the solution\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <Textarea\n          placeholder=\"Example: Create a comprehensive market analysis report for electric vehicles in North America, including key players, market trends, and future projections...\"\n          value={goal}\n          onChange={(e) => setGoal(e.target.value)}\n          onKeyDown={handleKeyDown}\n          className=\"min-h-32 resize-none text-sm\"\n          disabled={isLoading}\n          data-testid=\"input-goal\"\n        />\n        <div className=\"flex items-center justify-between\">\n          <p className=\"text-xs text-muted-foreground\">\n            Press <kbd className=\"px-1.5 py-0.5 text-xs bg-muted rounded\">Enter</kbd> to submit, <kbd className=\"px-1.5 py-0.5 text-xs bg-muted rounded\">Shift+Enter</kbd> for new line\n          </p>\n          <Button\n            onClick={handleSubmit}\n            disabled={!goal.trim() || isLoading}\n            className=\"gap-2\"\n            data-testid=\"button-submit-goal\"\n          >\n            {isLoading ? (\n              <>Processing...</>\n            ) : (\n              <>\n                <Send className=\"h-4 w-4\" />\n                Execute\n              </>\n            )}\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2489},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 222 0% 98%;\n\n  --foreground: 222 15% 15%;\n\n  --border: 222 10% 88%;\n\n  --card: 222 0% 100%;\n\n  --card-foreground: 222 15% 15%;\n\n  --card-border: 222 10% 93%;\n\n  --sidebar: 222 3% 96%;\n\n  --sidebar-foreground: 222 15% 15%;\n\n  --sidebar-border: 222 8% 90%;\n\n  --sidebar-primary: 260 70% 55%;\n\n  --sidebar-primary-foreground: 260 10% 98%;\n\n  --sidebar-accent: 222 6% 91%;\n\n  --sidebar-accent-foreground: 222 15% 20%;\n\n  --sidebar-ring: 260 70% 55%;\n\n  --popover: 222 5% 94%;\n\n  --popover-foreground: 222 15% 15%;\n\n  --popover-border: 222 10% 86%;\n\n  --primary: 260 70% 55%;\n\n  --primary-foreground: 260 10% 98%;\n\n  --secondary: 222 8% 88%;\n\n  --secondary-foreground: 222 15% 20%;\n\n  --muted: 222 6% 92%;\n\n  --muted-foreground: 222 10% 45%;\n\n  --accent: 222 8% 90%;\n\n  --accent-foreground: 222 15% 20%;\n\n  --destructive: 0 84% 50%;\n\n  --destructive-foreground: 0 10% 98%;\n\n  --input: 222 15% 70%;\n  --ring: 260 70% 55%;\n  --chart-1: 260 70% 45%;\n  --chart-2: 200 85% 40%;\n  --chart-3: 150 60% 38%;\n  --chart-4: 30 85% 48%;\n  --chart-5: 280 65% 45%;\n\n  --font-sans: Inter, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: \"JetBrains Mono\", Menlo, monospace;\n  --font-display: \"Space Grotesk\", sans-serif;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(222 15% 15% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(222 15% 15% / 0.08);\n  --shadow-sm: 0px 2px 4px -1px hsl(222 15% 15% / 0.06), 0px 1px 2px -1px hsl(222 15% 15% / 0.04);\n  --shadow: 0px 4px 6px -1px hsl(222 15% 15% / 0.08), 0px 2px 4px -1px hsl(222 15% 15% / 0.05);\n  --shadow-md: 0px 6px 12px -2px hsl(222 15% 15% / 0.10), 0px 3px 6px -2px hsl(222 15% 15% / 0.06);\n  --shadow-lg: 0px 10px 20px -3px hsl(222 15% 15% / 0.12), 0px 4px 8px -2px hsl(222 15% 15% / 0.08);\n  --shadow-xl: 0px 20px 30px -5px hsl(222 15% 15% / 0.15), 0px 8px 12px -3px hsl(222 15% 15% / 0.10);\n  --shadow-2xl: 0px 25px 50px -12px hsl(222 15% 15% / 0.20);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 222 15% 9%;\n\n  --foreground: 222 10% 95%;\n\n  --border: 222 10% 20%;\n\n  --card: 222 15% 12%;\n\n  --card-foreground: 222 10% 95%;\n\n  --card-border: 222 10% 18%;\n\n  --sidebar: 222 15% 15%;\n\n  --sidebar-foreground: 222 10% 95%;\n\n  --sidebar-border: 222 10% 22%;\n\n  --sidebar-primary: 260 70% 65%;\n\n  --sidebar-primary-foreground: 260 10% 98%;\n\n  --sidebar-accent: 222 12% 20%;\n\n  --sidebar-accent-foreground: 222 10% 95%;\n\n  --sidebar-ring: 260 70% 65%;\n\n  --popover: 222 15% 18%;\n\n  --popover-foreground: 222 10% 95%;\n\n  --popover-border: 222 10% 25%;\n\n  --primary: 260 70% 65%;\n\n  --primary-foreground: 260 10% 98%;\n\n  --secondary: 222 12% 23%;\n\n  --secondary-foreground: 222 10% 95%;\n\n  --muted: 222 12% 21%;\n\n  --muted-foreground: 222 8% 70%;\n\n  --accent: 222 15% 22%;\n\n  --accent-foreground: 222 10% 95%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 10% 98%;\n\n  --input: 222 10% 30%;\n  --ring: 260 70% 65%;\n  --chart-1: 260 70% 65%;\n  --chart-2: 200 85% 55%;\n  --chart-3: 150 60% 55%;\n  --chart-4: 30 85% 60%;\n  --chart-5: 280 65% 60%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(222 15% 5% / 0.30);\n  --shadow-xs: 0px 1px 3px 0px hsl(222 15% 5% / 0.40);\n  --shadow-sm: 0px 2px 4px -1px hsl(222 15% 5% / 0.35), 0px 1px 2px -1px hsl(222 15% 5% / 0.25);\n  --shadow: 0px 4px 6px -1px hsl(222 15% 5% / 0.40), 0px 2px 4px -1px hsl(222 15% 5% / 0.30);\n  --shadow-md: 0px 6px 12px -2px hsl(222 15% 5% / 0.45), 0px 3px 6px -2px hsl(222 15% 5% / 0.35);\n  --shadow-lg: 0px 10px 20px -3px hsl(222 15% 5% / 0.50), 0px 4px 8px -2px hsl(222 15% 5% / 0.40);\n  --shadow-xl: 0px 20px 30px -5px hsl(222 15% 5% / 0.55), 0px 8px 12px -3px hsl(222 15% 5% / 0.45);\n  --shadow-2xl: 0px 25px 50px -12px hsl(222 15% 5% / 0.60);\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: -1;\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: 999;\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":11190},"client/src/components/execution-output.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport type { AgentLog } from \"@shared/schema\";\nimport { getAgentTextClass, agentNames, getRelativeTime } from \"@/lib/agent-utils\";\nimport { Terminal, Info, CheckCircle2, AlertTriangle, XCircle } from \"lucide-react\";\n\ninterface ExecutionOutputProps {\n  logs: AgentLog[];\n  isLive?: boolean;\n}\n\nexport function ExecutionOutput({ logs, isLive = false }: ExecutionOutputProps) {\n  const getLevelIcon = (level: string) => {\n    switch (level) {\n      case \"success\":\n        return <CheckCircle2 className=\"h-3 w-3 text-green-500\" />;\n      case \"error\":\n        return <XCircle className=\"h-3 w-3 text-red-500\" />;\n      case \"warning\":\n        return <AlertTriangle className=\"h-3 w-3 text-yellow-500\" />;\n      default:\n        return <Info className=\"h-3 w-3 text-blue-500\" />;\n    }\n  };\n\n  const getLevelColor = (level: string) => {\n    switch (level) {\n      case \"success\":\n        return \"text-green-500\";\n      case \"error\":\n        return \"text-red-500\";\n      case \"warning\":\n        return \"text-yellow-500\";\n      default:\n        return \"text-blue-500\";\n    }\n  };\n\n  return (\n    <Card className=\"flex flex-col h-full\" data-testid=\"card-execution-output\">\n      <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-4 border-b\">\n        <div className=\"flex items-center gap-2\">\n          <Terminal className=\"h-4 w-4 text-muted-foreground\" />\n          <CardTitle className=\"text-base font-semibold\">Execution Output</CardTitle>\n        </div>\n        {isLive && (\n          <Badge variant=\"outline\" className=\"text-xs\">\n            <span className=\"relative flex h-2 w-2 mr-1\">\n              <span className=\"animate-ping absolute inline-flex h-full w-full rounded-full bg-green-400 opacity-75\"></span>\n              <span className=\"relative inline-flex rounded-full h-2 w-2 bg-green-500\"></span>\n            </span>\n            Live\n          </Badge>\n        )}\n      </CardHeader>\n      <CardContent className=\"flex-1 p-0 overflow-hidden\">\n        <ScrollArea className=\"h-full\">\n          <div className=\"p-4 space-y-2 font-mono text-xs\" data-testid=\"log-container\">\n            {logs.length === 0 ? (\n              <div className=\"flex items-center justify-center h-32 text-muted-foreground\">\n                <p>No logs yet. Start an execution to see output.</p>\n              </div>\n            ) : (\n              logs.map((log, index) => {\n                const level = (log.metadata as any)?.level || \"info\";\n                return (\n                  <div\n                    key={log.id}\n                    className=\"flex items-start gap-2 p-2 rounded-md hover:bg-muted/50 transition-colors\"\n                    data-testid={`log-entry-${index}`}\n                  >\n                    <div className=\"flex items-center gap-2 flex-shrink-0 w-32\">\n                      {getLevelIcon(level)}\n                      <span className=\"text-xs text-muted-foreground\">\n                        {new Date(log.timestamp).toLocaleTimeString()}\n                      </span>\n                    </div>\n                    <Badge\n                      variant=\"secondary\"\n                      className={`flex-shrink-0 text-xs ${getAgentTextClass(log.agentType as any)}`}\n                    >\n                      {agentNames[log.agentType as any] || log.agentType}\n                    </Badge>\n                    <div className=\"flex-1 space-y-1\">\n                      <p className={`font-medium ${getLevelColor(level)}`}>\n                        {log.action}\n                      </p>\n                      {log.reasoning && (\n                        <p className=\"text-muted-foreground text-xs\">\n                          {log.reasoning}\n                        </p>\n                      )}\n                      {log.output && typeof log.output === 'object' && (\n                        <pre className=\"text-xs text-muted-foreground mt-1 p-2 bg-muted/30 rounded overflow-x-auto\">\n                          {JSON.stringify(log.output as any, null, 2)}\n                        </pre>\n                      )}\n                    </div>\n                  </div>\n                );\n              })\n            )}\n          </div>\n        </ScrollArea>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4433},"client/src/pages/dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useWebSocket } from \"@/hooks/useWebSocket\";\nimport { AgentStatusCard } from \"@/components/agent-status-card\";\nimport { AgentVisualizer } from \"@/components/agent-visualizer\";\nimport { TaskInput } from \"@/components/task-input\";\nimport { ExecutionOutput } from \"@/components/execution-output\";\nimport { ExecutionTimeline } from \"@/components/execution-timeline\";\nimport { MetricsCards } from \"@/components/metrics-cards\";\nimport type { AgentType, AgentState, Execution, Task, AgentLog, ExecutionUpdate } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n  const [agentStates, setAgentStates] = useState<Record<AgentType, AgentState>>({\n    planner: { type: \"planner\", status: \"idle\" },\n    executor: { type: \"executor\", status: \"idle\" },\n    researcher: { type: \"researcher\", status: \"idle\" },\n    coder: { type: \"coder\", status: \"idle\" },\n    analyst: { type: \"analyst\", status: \"idle\" },\n  });\n\n  const [currentAgent, setCurrentAgent] = useState<AgentType>();\n  const [currentExecution, setCurrentExecution] = useState<Execution | null>(null);\n  const [liveLogs, setLiveLogs] = useState<AgentLog[]>([]);\n  const [liveTasks, setLiveTasks] = useState<Task[]>([]);\n\n  // Fetch analytics metrics\n  const { data: metrics } = useQuery({\n    queryKey: [\"/api/analytics\"],\n  });\n\n  // Fetch recent executions\n  const { data: executions, isLoading: executionsLoading } = useQuery<Execution[]>({\n    queryKey: [\"/api/executions\"],\n  });\n\n  // Create execution mutation\n  const createExecutionMutation = useMutation({\n    mutationFn: async (goal: string) => {\n      const response = await apiRequest(\"POST\", \"/api/executions\", { goal });\n      return response as Execution;\n    },\n    onSuccess: (execution: Execution) => {\n      setCurrentExecution(execution);\n      setLiveLogs([]);\n      setLiveTasks([]);\n      queryClient.invalidateQueries({ queryKey: [\"/api/executions\"] });\n      toast({\n        title: \"Execution Started\",\n        description: \"AI agents are working on your goal...\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // WebSocket for real-time updates\n  useWebSocket(\"/ws\", {\n    onMessage: (data) => {\n      if (data.type === \"execution_update\") {\n        const update: ExecutionUpdate = data.payload;\n        \n        if (update.currentAgent) {\n          setCurrentAgent(update.currentAgent);\n          setAgentStates((prev) => ({\n            ...prev,\n            [update.currentAgent!]: {\n              ...prev[update.currentAgent!],\n              status: \"active\",\n              currentTask: update.currentTask,\n            },\n          }));\n        }\n\n        if (update.status === \"completed\" || update.status === \"failed\") {\n          queryClient.invalidateQueries({ queryKey: [\"/api/executions\"] });\n          queryClient.invalidateQueries({ queryKey: [\"/api/analytics\"] });\n          \n          setCurrentAgent(undefined);\n          Object.keys(agentStates).forEach((agent) => {\n            setAgentStates((prev) => ({\n              ...prev,\n              [agent]: { ...prev[agent as AgentType], status: \"idle\", currentTask: undefined },\n            }));\n          });\n        }\n      } else if (data.type === \"task_update\") {\n        setLiveTasks((prev) => {\n          const existing = prev.find((t) => t.id === data.payload.id);\n          if (existing) {\n            return prev.map((t) => (t.id === data.payload.id ? data.payload : t));\n          }\n          return [...prev, data.payload];\n        });\n      } else if (data.type === \"log\") {\n        setLiveLogs((prev) => [...prev, data.payload]);\n      } else if (data.type === \"agent_performance\") {\n        const { agentType, performance } = data.payload;\n        setAgentStates((prev) => ({\n          ...prev,\n          [agentType]: {\n            ...prev[agentType],\n            performance,\n          },\n        }));\n      }\n    },\n  });\n\n  const handleSubmitGoal = (goal: string) => {\n    createExecutionMutation.mutate(goal);\n  };\n\n  return (\n    <div className=\"flex flex-col gap-6 p-6\">\n      {/* Page Header */}\n      <div className=\"space-y-2\">\n        <h1 className=\"text-3xl font-bold font-[family-name:var(--font-display)]\">\n          RAJGPT Dashboard\n        </h1>\n        <p className=\"text-muted-foreground\">\n          Elite multi-agent AI orchestration platform\n        </p>\n      </div>\n\n      {/* Metrics */}\n      <MetricsCards\n        totalExecutions={(metrics as any)?.totalExecutions || 0}\n        successfulExecutions={(metrics as any)?.successfulExecutions || 0}\n        failedExecutions={(metrics as any)?.failedExecutions || 0}\n        avgExecutionTime={(metrics as any)?.avgExecutionTime || 0}\n      />\n\n      {/* Agent Status Grid */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-5\">\n        {([\"planner\", \"executor\", \"researcher\", \"coder\", \"analyst\"] as AgentType[]).map(\n          (agentType) => (\n            <AgentStatusCard\n              key={agentType}\n              agent={agentType}\n              state={agentStates[agentType]}\n            />\n          )\n        )}\n      </div>\n\n      {/* Main Content Grid */}\n      <div className=\"grid gap-6 lg:grid-cols-2\">\n        {/* Left Column */}\n        <div className=\"space-y-6\">\n          <TaskInput\n            onSubmit={handleSubmitGoal}\n            isLoading={createExecutionMutation.isPending}\n          />\n          <AgentVisualizer agents={agentStates} currentAgent={currentAgent} />\n        </div>\n\n        {/* Right Column */}\n        <div className=\"space-y-6\">\n          <div className=\"h-[400px]\">\n            <ExecutionOutput logs={liveLogs} isLive={!!currentExecution} />\n          </div>\n          <div className=\"h-[400px]\">\n            <ExecutionTimeline tasks={liveTasks} />\n          </div>\n        </div>\n      </div>\n\n      {/* Recent Executions */}\n      <div className=\"space-y-4\">\n        <h2 className=\"text-xl font-semibold font-[family-name:var(--font-display)]\">\n          Recent Executions\n        </h2>\n        {executionsLoading ? (\n          <div className=\"space-y-2\">\n            <Skeleton className=\"h-16 w-full\" />\n            <Skeleton className=\"h-16 w-full\" />\n            <Skeleton className=\"h-16 w-full\" />\n          </div>\n        ) : executions && executions.length > 0 ? (\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            {executions.slice(0, 6).map((execution) => (\n              <a\n                key={execution.id}\n                href={`/execution/${execution.id}`}\n                className=\"block\"\n                data-testid={`link-execution-${execution.id}`}\n              >\n                <div className=\"p-4 border rounded-lg hover-elevate active-elevate-2 transition-all\">\n                  <div className=\"flex items-start justify-between gap-2 mb-2\">\n                    <p className=\"text-sm font-medium line-clamp-2\">\n                      {execution.goal}\n                    </p>\n                    <span\n                      className={`text-xs px-2 py-0.5 rounded-full whitespace-nowrap ${\n                        execution.status === \"completed\"\n                          ? \"bg-green-500/10 text-green-500\"\n                          : execution.status === \"failed\"\n                          ? \"bg-red-500/10 text-red-500\"\n                          : \"bg-blue-500/10 text-blue-500\"\n                      }`}\n                    >\n                      {execution.status}\n                    </span>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {new Date(execution.createdAt).toLocaleString()}\n                  </p>\n                </div>\n              </a>\n            ))}\n          </div>\n        ) : (\n          <p className=\"text-sm text-muted-foreground\">\n            No executions yet. Submit a goal above to get started.\n          </p>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":8281},"server/agents/executor-agent.ts":{"content":"import { BaseAgent, type AgentContext, type AgentResult } from \"./base-agent\";\n\nexport class ExecutorAgent extends BaseAgent {\n  constructor() {\n    super(\n      \"executor\",\n      `You are an elite Executor Agent responsible for performing general operations and API calls.\n\nYour responsibilities:\n- Execute system tasks and operations\n- Make API calls and handle responses\n- Process and transform data\n- Perform file operations\n- Execute general-purpose tasks\n\nWhen given a task, determine the best approach to complete it and execute accordingly.\nProvide clear results and any errors encountered.\n\nOutput Format (JSON):\n{\n  \"reasoning\": \"Explanation of approach and execution\",\n  \"result\": \"The result of the task execution\",\n  \"success\": true/false\n}\n\nBe thorough and handle errors gracefully.`,\n      [\"api_call\", \"file_operation\", \"data_processing\"]\n    );\n  }\n\n  async execute(context: AgentContext): Promise<AgentResult> {\n    try {\n      const prompt = `Task: ${context.currentTask}\n\nGoal Context: ${context.goal}\n\nExecute this task and provide the result. If you cannot actually execute it in this environment, \nsimulate a reasonable response that demonstrates what the execution would produce.\n\nRespond with valid JSON only.`;\n\n      const response = await this.callLLM([\n        { role: \"user\", content: prompt },\n      ], {\n        response_format: { type: \"json_object\" },\n      });\n\n      const result = JSON.parse(response);\n\n      return {\n        success: result.success !== false,\n        result: result.result,\n        reasoning: result.reasoning || \"Task executed\",\n        toolsUsed: [\"execution_engine\"],\n      };\n    } catch (error: any) {\n      return {\n        success: false,\n        error: error.message,\n        reasoning: \"Failed to execute task\",\n      };\n    }\n  }\n}\n","size_bytes":1798},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/pages/analytics.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { MetricsCards } from \"@/components/metrics-cards\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, Legend } from \"recharts\";\nimport type { AnalyticsMetrics } from \"@shared/schema\";\nimport { agentNames, agentColors } from \"@/lib/agent-utils\";\nimport { TrendingUp } from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\nexport default function Analytics() {\n  const { data: metrics, isLoading } = useQuery<AnalyticsMetrics>({\n    queryKey: [\"/api/analytics\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex flex-col gap-6 p-6\">\n        <Skeleton className=\"h-12 w-64\" />\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n          {[1, 2, 3, 4].map((i) => (\n            <Skeleton key={i} className=\"h-32\" />\n          ))}\n        </div>\n        <div className=\"grid gap-6 md:grid-cols-2\">\n          <Skeleton className=\"h-96\" />\n          <Skeleton className=\"h-96\" />\n        </div>\n      </div>\n    );\n  }\n\n  if (!metrics) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <p className=\"text-muted-foreground\">No analytics data available</p>\n      </div>\n    );\n  }\n\n  const agentPerformanceData = Object.entries(metrics.agentPerformance || {}).map(\n    ([agent, perf]) => ({\n      name: agentNames[agent as keyof typeof agentNames],\n      tasks: perf.tasksCompleted,\n      successRate: perf.successRate,\n      avgDuration: (perf.avgDuration / 1000).toFixed(1),\n      fill: agentColors[agent as keyof typeof agentColors].bg,\n    })\n  );\n\n  const toolUsageData = Object.entries(metrics.toolUsageStats || {}).map(\n    ([tool, stats]) => ({\n      name: tool,\n      count: stats.count,\n      successRate: stats.successRate,\n    })\n  );\n\n  const statusData = [\n    { name: \"Successful\", value: metrics.successfulExecutions, color: \"hsl(142 76% 45%)\" },\n    { name: \"Failed\", value: metrics.failedExecutions, color: \"hsl(0 84% 60%)\" },\n  ];\n\n  return (\n    <div className=\"flex flex-col gap-6 p-6\">\n      {/* Page Header */}\n      <div className=\"space-y-2\">\n        <h1 className=\"text-3xl font-bold font-[family-name:var(--font-display)]\">\n          Analytics\n        </h1>\n        <p className=\"text-muted-foreground\">\n          Performance metrics and insights across all executions\n        </p>\n      </div>\n\n      {/* Metrics */}\n      <MetricsCards\n        totalExecutions={metrics.totalExecutions}\n        successfulExecutions={metrics.successfulExecutions}\n        failedExecutions={metrics.failedExecutions}\n        avgExecutionTime={metrics.avgExecutionTime}\n      />\n\n      {/* Charts Grid */}\n      <div className=\"grid gap-6 md:grid-cols-2\">\n        {/* Agent Performance Chart */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <TrendingUp className=\"h-4 w-4\" />\n              Agent Performance\n            </CardTitle>\n            <CardDescription>Tasks completed by each agent</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart data={agentPerformanceData}>\n                <CartesianGrid strokeDasharray=\"3 3\" opacity={0.1} />\n                <XAxis\n                  dataKey=\"name\"\n                  tick={{ fill: \"hsl(var(--muted-foreground))\", fontSize: 12 }}\n                />\n                <YAxis tick={{ fill: \"hsl(var(--muted-foreground))\", fontSize: 12 }} />\n                <Tooltip\n                  contentStyle={{\n                    backgroundColor: \"hsl(var(--popover))\",\n                    border: \"1px solid hsl(var(--border))\",\n                    borderRadius: \"6px\",\n                  }}\n                />\n                <Bar dataKey=\"tasks\" radius={[4, 4, 0, 0]} />\n              </BarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        {/* Execution Status Distribution */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Execution Status</CardTitle>\n            <CardDescription>Success vs failure distribution</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <PieChart>\n                <Pie\n                  data={statusData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  labelLine={false}\n                  label={({ name, percent }) =>\n                    `${name} ${(percent * 100).toFixed(0)}%`\n                  }\n                  outerRadius={100}\n                  fill=\"#8884d8\"\n                  dataKey=\"value\"\n                >\n                  {statusData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={entry.color} />\n                  ))}\n                </Pie>\n                <Tooltip\n                  contentStyle={{\n                    backgroundColor: \"hsl(var(--popover))\",\n                    border: \"1px solid hsl(var(--border))\",\n                    borderRadius: \"6px\",\n                  }}\n                />\n              </PieChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        {/* Tool Usage Chart */}\n        {toolUsageData.length > 0 && (\n          <Card className=\"md:col-span-2\">\n            <CardHeader>\n              <CardTitle>Tool Usage Statistics</CardTitle>\n              <CardDescription>Frequency of tool usage across executions</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart data={toolUsageData} layout=\"horizontal\">\n                  <CartesianGrid strokeDasharray=\"3 3\" opacity={0.1} />\n                  <XAxis type=\"number\" tick={{ fill: \"hsl(var(--muted-foreground))\", fontSize: 12 }} />\n                  <YAxis\n                    type=\"category\"\n                    dataKey=\"name\"\n                    tick={{ fill: \"hsl(var(--muted-foreground))\", fontSize: 12 }}\n                  />\n                  <Tooltip\n                    contentStyle={{\n                      backgroundColor: \"hsl(var(--popover))\",\n                      border: \"1px solid hsl(var(--border))\",\n                      borderRadius: \"6px\",\n                    }}\n                  />\n                  <Bar dataKey=\"count\" fill=\"hsl(var(--primary))\" radius={[0, 4, 4, 0]} />\n                </BarChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Agent Details Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Detailed Agent Metrics</CardTitle>\n          <CardDescription>Comprehensive performance breakdown</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full text-sm\">\n              <thead>\n                <tr className=\"border-b\">\n                  <th className=\"text-left p-3 font-medium\">Agent</th>\n                  <th className=\"text-right p-3 font-medium\">Tasks Completed</th>\n                  <th className=\"text-right p-3 font-medium\">Success Rate</th>\n                  <th className=\"text-right p-3 font-medium\">Avg. Duration</th>\n                </tr>\n              </thead>\n              <tbody>\n                {agentPerformanceData.map((agent) => (\n                  <tr key={agent.name} className=\"border-b hover:bg-muted/50\">\n                    <td className=\"p-3 font-medium\">{agent.name}</td>\n                    <td className=\"text-right p-3 font-mono\">{agent.tasks}</td>\n                    <td className=\"text-right p-3 font-mono\">{agent.successRate.toFixed(1)}%</td>\n                    <td className=\"text-right p-3 font-mono\">{agent.avgDuration}s</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":8112},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"server/storage.ts":{"content":"// Reference: javascript_database blueprint\nimport {\n  executions,\n  tasks,\n  agentLogs,\n  toolUsage,\n  type Execution,\n  type Task,\n  type AgentLog,\n  type ToolUsage,\n  type InsertExecution,\n  type InsertTask,\n  type InsertAgentLog,\n  type InsertToolUsage,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Executions\n  createExecution(data: InsertExecution): Promise<Execution>;\n  getExecution(id: string): Promise<Execution | undefined>;\n  getAllExecutions(limit?: number): Promise<Execution[]>;\n  updateExecution(id: string, data: Partial<Execution>): Promise<Execution>;\n\n  // Tasks\n  createTask(data: InsertTask): Promise<Task>;\n  getTask(id: string): Promise<Task | undefined>;\n  getTasksByExecution(executionId: string): Promise<Task[]>;\n  updateTask(id: string, data: Partial<Task>): Promise<Task>;\n\n  // Agent Logs\n  createAgentLog(data: InsertAgentLog): Promise<AgentLog>;\n  getLogsByExecution(executionId: string): Promise<AgentLog[]>;\n  getLogsByTask(taskId: string): Promise<AgentLog[]>;\n\n  // Tool Usage\n  createToolUsage(data: InsertToolUsage): Promise<ToolUsage>;\n  getToolUsageByExecution(executionId: string): Promise<ToolUsage[]>;\n\n  // Analytics\n  getAnalytics(): Promise<any>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // Executions\n  async createExecution(data: InsertExecution): Promise<Execution> {\n    const [execution] = await db.insert(executions).values(data).returning();\n    return execution;\n  }\n\n  async getExecution(id: string): Promise<Execution | undefined> {\n    const [execution] = await db\n      .select()\n      .from(executions)\n      .where(eq(executions.id, id));\n    return execution || undefined;\n  }\n\n  async getAllExecutions(limit: number = 50): Promise<Execution[]> {\n    return await db\n      .select()\n      .from(executions)\n      .orderBy(desc(executions.createdAt))\n      .limit(limit);\n  }\n\n  async updateExecution(\n    id: string,\n    data: Partial<Execution>\n  ): Promise<Execution> {\n    const [execution] = await db\n      .update(executions)\n      .set(data)\n      .where(eq(executions.id, id))\n      .returning();\n    return execution;\n  }\n\n  // Tasks\n  async createTask(data: InsertTask): Promise<Task> {\n    const [task] = await db.insert(tasks).values(data).returning();\n    return task;\n  }\n\n  async getTask(id: string): Promise<Task | undefined> {\n    const [task] = await db.select().from(tasks).where(eq(tasks.id, id));\n    return task || undefined;\n  }\n\n  async getTasksByExecution(executionId: string): Promise<Task[]> {\n    return await db\n      .select()\n      .from(tasks)\n      .where(eq(tasks.executionId, executionId))\n      .orderBy(tasks.order);\n  }\n\n  async updateTask(id: string, data: Partial<Task>): Promise<Task> {\n    const [task] = await db\n      .update(tasks)\n      .set(data)\n      .where(eq(tasks.id, id))\n      .returning();\n    return task;\n  }\n\n  // Agent Logs\n  async createAgentLog(data: InsertAgentLog): Promise<AgentLog> {\n    const [log] = await db.insert(agentLogs).values(data).returning();\n    return log;\n  }\n\n  async getLogsByExecution(executionId: string): Promise<AgentLog[]> {\n    return await db\n      .select()\n      .from(agentLogs)\n      .where(eq(agentLogs.executionId, executionId))\n      .orderBy(agentLogs.timestamp);\n  }\n\n  async getLogsByTask(taskId: string): Promise<AgentLog[]> {\n    return await db\n      .select()\n      .from(agentLogs)\n      .where(eq(agentLogs.taskId, taskId))\n      .orderBy(agentLogs.timestamp);\n  }\n\n  // Tool Usage\n  async createToolUsage(data: InsertToolUsage): Promise<ToolUsage> {\n    const [usage] = await db.insert(toolUsage).values(data).returning();\n    return usage;\n  }\n\n  async getToolUsageByExecution(executionId: string): Promise<ToolUsage[]> {\n    return await db\n      .select()\n      .from(toolUsage)\n      .where(eq(toolUsage.executionId, executionId))\n      .orderBy(toolUsage.timestamp);\n  }\n\n  // Analytics\n  async getAnalytics(): Promise<any> {\n    const [totalStats] = await db\n      .select({\n        total: sql<number>`count(*)::int`,\n        successful: sql<number>`count(*) filter (where ${executions.status} = 'completed')::int`,\n        failed: sql<number>`count(*) filter (where ${executions.status} = 'failed')::int`,\n      })\n      .from(executions);\n\n    const [avgTime] = await db\n      .select({\n        avgDuration: sql<number>`\n          coalesce(\n            avg(\n              extract(epoch from (${executions.completedAt} - ${executions.createdAt})) * 1000\n            )::int,\n            0\n          )\n        `,\n      })\n      .from(executions)\n      .where(sql`${executions.completedAt} is not null`);\n\n    const agentStats = await db\n      .select({\n        agentType: tasks.agentType,\n        completed: sql<number>`count(*) filter (where ${tasks.status} = 'completed')::int`,\n        total: sql<number>`count(*)::int`,\n        avgDuration: sql<number>`\n          coalesce(\n            avg(\n              extract(epoch from (${tasks.completedAt} - ${tasks.startedAt})) * 1000\n            )::int,\n            0\n          )\n        `,\n      })\n      .from(tasks)\n      .groupBy(tasks.agentType);\n\n    const toolStats = await db\n      .select({\n        toolName: toolUsage.toolName,\n        count: sql<number>`count(*)::int`,\n        successful: sql<number>`count(*) filter (where ${toolUsage.success} = true)::int`,\n      })\n      .from(toolUsage)\n      .groupBy(toolUsage.toolName);\n\n    const agentPerformance: any = {};\n    agentStats.forEach((stat) => {\n      agentPerformance[stat.agentType] = {\n        tasksCompleted: stat.completed,\n        successRate: stat.total > 0 ? (stat.completed / stat.total) * 100 : 0,\n        avgDuration: stat.avgDuration,\n      };\n    });\n\n    const toolUsageStats: any = {};\n    toolStats.forEach((stat) => {\n      toolUsageStats[stat.toolName] = {\n        count: stat.count,\n        successRate: stat.count > 0 ? (stat.successful / stat.count) * 100 : 0,\n      };\n    });\n\n    return {\n      totalExecutions: totalStats?.total || 0,\n      successfulExecutions: totalStats?.successful || 0,\n      failedExecutions: totalStats?.failed || 0,\n      avgExecutionTime: avgTime?.avgDuration || 0,\n      agentPerformance,\n      toolUsageStats,\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":6315},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/lib/agent-utils.ts":{"content":"import type { AgentType, AgentStatus } from \"@shared/schema\";\n\nexport const agentColors: Record<AgentType, { bg: string; border: string; text: string; chart: string }> = {\n  planner: {\n    bg: \"hsl(260 70% 65%)\",\n    border: \"hsl(260 70% 55%)\",\n    text: \"text-[hsl(260_70%_65%)]\",\n    chart: \"hsl(var(--chart-1))\",\n  },\n  executor: {\n    bg: \"hsl(200 85% 55%)\",\n    border: \"hsl(200 85% 45%)\",\n    text: \"text-[hsl(200_85%_55%)]\",\n    chart: \"hsl(var(--chart-2))\",\n  },\n  researcher: {\n    bg: \"hsl(150 60% 55%)\",\n    border: \"hsl(150 60% 45%)\",\n    text: \"text-[hsl(150_60%_55%)]\",\n    chart: \"hsl(var(--chart-3))\",\n  },\n  coder: {\n    bg: \"hsl(30 85% 60%)\",\n    border: \"hsl(30 85% 50%)\",\n    text: \"text-[hsl(30_85%_60%)]\",\n    chart: \"hsl(var(--chart-4))\",\n  },\n  analyst: {\n    bg: \"hsl(280 65% 60%)\",\n    border: \"hsl(280 65% 50%)\",\n    text: \"text-[hsl(280_65%_60%)]\",\n    chart: \"hsl(var(--chart-5))\",\n  },\n};\n\nexport const agentNames: Record<AgentType, string> = {\n  planner: \"Planner\",\n  executor: \"Executor\",\n  researcher: \"Researcher\",\n  coder: \"Coder\",\n  analyst: \"Analyst\",\n};\n\nexport const agentDescriptions: Record<AgentType, string> = {\n  planner: \"Breaks down complex goals into actionable subtasks\",\n  executor: \"Executes API calls and system tasks\",\n  researcher: \"Performs web searches and data scraping\",\n  coder: \"Writes, debugs, and executes code dynamically\",\n  analyst: \"Processes and summarizes results with insights\",\n};\n\nexport function getAgentColor(agent: AgentType): string {\n  return agentColors[agent].bg;\n}\n\nexport function getAgentBorderColor(agent: AgentType): string {\n  return agentColors[agent].border;\n}\n\nexport function getAgentTextClass(agent: AgentType): string {\n  return agentColors[agent].text;\n}\n\nexport function getStatusColor(status: AgentStatus): string {\n  switch (status) {\n    case \"active\":\n      return \"hsl(142 76% 45%)\";\n    case \"idle\":\n      return \"hsl(222 8% 70%)\";\n    case \"error\":\n      return \"hsl(0 84% 60%)\";\n    case \"offline\":\n      return \"hsl(222 8% 35%)\";\n    default:\n      return \"hsl(222 8% 50%)\";\n  }\n}\n\nexport function formatDuration(ms: number): string {\n  if (ms < 1000) return `${ms}ms`;\n  if (ms < 60000) return `${(ms / 1000).toFixed(1)}s`;\n  const minutes = Math.floor(ms / 60000);\n  const seconds = ((ms % 60000) / 1000).toFixed(0);\n  return `${minutes}m ${seconds}s`;\n}\n\nexport function getRelativeTime(date: Date): string {\n  const now = new Date();\n  const diff = now.getTime() - date.getTime();\n  \n  if (diff < 60000) return 'just now';\n  if (diff < 3600000) return `${Math.floor(diff / 60000)}m ago`;\n  if (diff < 86400000) return `${Math.floor(diff / 3600000)}h ago`;\n  return `${Math.floor(diff / 86400000)}d ago`;\n}\n","size_bytes":2710},"client/src/pages/execution-detail.tsx":{"content":"import { useParams } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { ExecutionOutput } from \"@/components/execution-output\";\nimport { ExecutionTimeline } from \"@/components/execution-timeline\";\nimport type { Execution, Task, AgentLog } from \"@shared/schema\";\nimport { ArrowLeft, Calendar, Clock, CheckCircle2, XCircle } from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { formatDuration } from \"@/lib/agent-utils\";\n\nexport default function ExecutionDetail() {\n  const params = useParams();\n  const executionId = params.id;\n\n  const { data: execution, isLoading: executionLoading } = useQuery<Execution>({\n    queryKey: [\"/api/executions\", executionId],\n  });\n\n  const { data: tasks = [] } = useQuery<Task[]>({\n    queryKey: [\"/api/executions\", executionId, \"tasks\"],\n    enabled: !!executionId,\n  });\n\n  const { data: logs = [] } = useQuery<AgentLog[]>({\n    queryKey: [\"/api/executions\", executionId, \"logs\"],\n    enabled: !!executionId,\n  });\n\n  if (executionLoading) {\n    return (\n      <div className=\"flex flex-col gap-6 p-6\">\n        <Skeleton className=\"h-8 w-32\" />\n        <Skeleton className=\"h-32 w-full\" />\n        <div className=\"grid gap-6 md:grid-cols-2\">\n          <Skeleton className=\"h-96\" />\n          <Skeleton className=\"h-96\" />\n        </div>\n      </div>\n    );\n  }\n\n  if (!execution) {\n    return (\n      <div className=\"flex flex-col items-center justify-center h-full gap-4\">\n        <p className=\"text-muted-foreground\">Execution not found</p>\n        <Button onClick={() => window.history.back()}>\n          <ArrowLeft className=\"h-4 w-4 mr-2\" />\n          Go Back\n        </Button>\n      </div>\n    );\n  }\n\n  const duration = execution.completedAt\n    ? new Date(execution.completedAt).getTime() - new Date(execution.createdAt).getTime()\n    : Date.now() - new Date(execution.createdAt).getTime();\n\n  return (\n    <div className=\"flex flex-col gap-6 p-6\">\n      {/* Back Button */}\n      <Button\n        variant=\"ghost\"\n        onClick={() => window.history.back()}\n        className=\"w-fit\"\n        data-testid=\"button-back\"\n      >\n        <ArrowLeft className=\"h-4 w-4 mr-2\" />\n        Back to Dashboard\n      </Button>\n\n      {/* Execution Header */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-start justify-between gap-4\">\n            <div className=\"space-y-2 flex-1\">\n              <div className=\"flex items-center gap-2 flex-wrap\">\n                <CardTitle className=\"text-2xl font-[family-name:var(--font-display)]\">\n                  Execution Details\n                </CardTitle>\n                <Badge\n                  variant={\n                    execution.status === \"completed\"\n                      ? \"default\"\n                      : execution.status === \"failed\"\n                      ? \"destructive\"\n                      : \"secondary\"\n                  }\n                  className=\"capitalize\"\n                  data-testid=\"badge-execution-status\"\n                >\n                  {execution.status === \"completed\" && <CheckCircle2 className=\"h-3 w-3 mr-1\" />}\n                  {execution.status === \"failed\" && <XCircle className=\"h-3 w-3 mr-1\" />}\n                  {execution.status}\n                </Badge>\n              </div>\n              <CardDescription className=\"text-base\" data-testid=\"text-execution-goal\">\n                {execution.goal}\n              </CardDescription>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n            <div className=\"space-y-1\">\n              <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                <Calendar className=\"h-4 w-4\" />\n                <span>Started</span>\n              </div>\n              <p className=\"text-sm font-mono\" data-testid=\"text-created-at\">\n                {new Date(execution.createdAt).toLocaleString()}\n              </p>\n            </div>\n\n            {execution.completedAt && (\n              <div className=\"space-y-1\">\n                <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                  <Calendar className=\"h-4 w-4\" />\n                  <span>Completed</span>\n                </div>\n                <p className=\"text-sm font-mono\" data-testid=\"text-completed-at\">\n                  {new Date(execution.completedAt).toLocaleString()}\n                </p>\n              </div>\n            )}\n\n            <div className=\"space-y-1\">\n              <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                <Clock className=\"h-4 w-4\" />\n                <span>Duration</span>\n              </div>\n              <p className=\"text-sm font-mono\" data-testid=\"text-duration\">\n                {formatDuration(duration)}\n              </p>\n            </div>\n\n            <div className=\"space-y-1\">\n              <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                <CheckCircle2 className=\"h-4 w-4\" />\n                <span>Tasks</span>\n              </div>\n              <p className=\"text-sm font-mono\" data-testid=\"text-tasks-count\">\n                {tasks.filter((t) => t.status === \"completed\").length} / {tasks.length}\n              </p>\n            </div>\n          </div>\n\n          {execution.error && (\n            <div className=\"mt-4 p-4 bg-destructive/10 border border-destructive/20 rounded-md\">\n              <p className=\"text-sm font-medium text-destructive mb-1\">Error</p>\n              <p className=\"text-sm text-destructive/80\" data-testid=\"text-execution-error\">\n                {execution.error}\n              </p>\n            </div>\n          )}\n\n          {execution.result && (\n            <div className=\"mt-4 p-4 bg-muted/50 rounded-md\">\n              <p className=\"text-sm font-medium mb-2\">Result</p>\n              <pre className=\"text-xs font-mono overflow-x-auto whitespace-pre-wrap\" data-testid=\"text-execution-result\">\n                {typeof execution.result === 'string'\n                  ? execution.result\n                  : JSON.stringify(execution.result as any, null, 2)}\n              </pre>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Timeline and Logs */}\n      <div className=\"grid gap-6 md:grid-cols-2\">\n        <div className=\"h-[600px]\">\n          <ExecutionTimeline tasks={tasks} />\n        </div>\n        <div className=\"h-[600px]\">\n          <ExecutionOutput logs={logs} />\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6760},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, jsonb, integer, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations } from \"drizzle-orm\";\n\n// Agent Types\nexport type AgentType = \"planner\" | \"executor\" | \"researcher\" | \"coder\" | \"analyst\";\nexport type AgentStatus = \"idle\" | \"active\" | \"error\" | \"offline\";\nexport type TaskStatus = \"pending\" | \"running\" | \"completed\" | \"failed\" | \"cancelled\";\nexport type ExecutionStatus = \"pending\" | \"planning\" | \"executing\" | \"analyzing\" | \"completed\" | \"failed\";\n\n// Executions table - stores user goals and overall execution results\nexport const executions = pgTable(\"executions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  goal: text(\"goal\").notNull(),\n  status: text(\"status\").notNull().default(\"pending\"),\n  result: jsonb(\"result\"),\n  error: text(\"error\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  completedAt: timestamp(\"completed_at\"),\n  metadata: jsonb(\"metadata\"),\n});\n\n// Tasks table - individual subtasks created by the Planner agent\nexport const tasks = pgTable(\"tasks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  executionId: varchar(\"execution_id\").notNull().references(() => executions.id, { onDelete: \"cascade\" }),\n  agentType: text(\"agent_type\").notNull(),\n  description: text(\"description\").notNull(),\n  status: text(\"status\").notNull().default(\"pending\"),\n  result: jsonb(\"result\"),\n  error: text(\"error\"),\n  order: integer(\"order\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  startedAt: timestamp(\"started_at\"),\n  completedAt: timestamp(\"completed_at\"),\n  metadata: jsonb(\"metadata\"),\n});\n\n// Agent Logs - detailed logs of agent actions and reasoning\nexport const agentLogs = pgTable(\"agent_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  executionId: varchar(\"execution_id\").notNull().references(() => executions.id, { onDelete: \"cascade\" }),\n  taskId: varchar(\"task_id\").references(() => tasks.id, { onDelete: \"cascade\" }),\n  agentType: text(\"agent_type\").notNull(),\n  action: text(\"action\").notNull(),\n  input: jsonb(\"input\"),\n  output: jsonb(\"output\"),\n  reasoning: text(\"reasoning\"),\n  timestamp: timestamp(\"timestamp\").notNull().defaultNow(),\n  metadata: jsonb(\"metadata\"),\n});\n\n// Tool Usage - tracks which tools were used by agents\nexport const toolUsage = pgTable(\"tool_usage\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  executionId: varchar(\"execution_id\").notNull().references(() => executions.id, { onDelete: \"cascade\" }),\n  taskId: varchar(\"task_id\").references(() => tasks.id, { onDelete: \"cascade\" }),\n  toolName: text(\"tool_name\").notNull(),\n  input: jsonb(\"input\"),\n  output: jsonb(\"output\"),\n  success: boolean(\"success\").notNull().default(true),\n  duration: integer(\"duration\"),\n  timestamp: timestamp(\"timestamp\").notNull().defaultNow(),\n  error: text(\"error\"),\n});\n\n// Relations\nexport const executionsRelations = relations(executions, ({ many }) => ({\n  tasks: many(tasks),\n  logs: many(agentLogs),\n  toolUsage: many(toolUsage),\n}));\n\nexport const tasksRelations = relations(tasks, ({ one, many }) => ({\n  execution: one(executions, {\n    fields: [tasks.executionId],\n    references: [executions.id],\n  }),\n  logs: many(agentLogs),\n  toolUsage: many(toolUsage),\n}));\n\nexport const agentLogsRelations = relations(agentLogs, ({ one }) => ({\n  execution: one(executions, {\n    fields: [agentLogs.executionId],\n    references: [executions.id],\n  }),\n  task: one(tasks, {\n    fields: [agentLogs.taskId],\n    references: [tasks.id],\n  }),\n}));\n\nexport const toolUsageRelations = relations(toolUsage, ({ one }) => ({\n  execution: one(executions, {\n    fields: [toolUsage.executionId],\n    references: [executions.id],\n  }),\n  task: one(tasks, {\n    fields: [toolUsage.taskId],\n    references: [tasks.id],\n  }),\n}));\n\n// Zod schemas for validation\nexport const insertExecutionSchema = createInsertSchema(executions).omit({\n  id: true,\n  createdAt: true,\n  completedAt: true,\n});\n\nexport const insertTaskSchema = createInsertSchema(tasks).omit({\n  id: true,\n  createdAt: true,\n  startedAt: true,\n  completedAt: true,\n});\n\nexport const insertAgentLogSchema = createInsertSchema(agentLogs).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertToolUsageSchema = createInsertSchema(toolUsage).omit({\n  id: true,\n  timestamp: true,\n});\n\n// TypeScript types\nexport type Execution = typeof executions.$inferSelect;\nexport type InsertExecution = z.infer<typeof insertExecutionSchema>;\n\nexport type Task = typeof tasks.$inferSelect;\nexport type InsertTask = z.infer<typeof insertTaskSchema>;\n\nexport type AgentLog = typeof agentLogs.$inferSelect;\nexport type InsertAgentLog = z.infer<typeof insertAgentLogSchema>;\n\nexport type ToolUsage = typeof toolUsage.$inferSelect;\nexport type InsertToolUsage = z.infer<typeof insertToolUsageSchema>;\n\n// Frontend-specific types for real-time updates\nexport interface AgentState {\n  type: AgentType;\n  status: AgentStatus;\n  currentTask?: string;\n  lastAction?: string;\n  performance?: {\n    tasksCompleted: number;\n    successRate: number;\n    avgDuration: number;\n  };\n}\n\nexport interface ExecutionUpdate {\n  executionId: string;\n  status: ExecutionStatus;\n  currentAgent?: AgentType;\n  currentTask?: string;\n  progress?: number;\n  timestamp: number;\n}\n\nexport interface TaskUpdate {\n  taskId: string;\n  status: TaskStatus;\n  agentType: AgentType;\n  progress?: number;\n  output?: any;\n  error?: string;\n  timestamp: number;\n}\n\nexport interface LogEntry {\n  id: string;\n  executionId: string;\n  taskId?: string;\n  agentType: AgentType;\n  action: string;\n  reasoning?: string;\n  timestamp: Date;\n  level: \"info\" | \"success\" | \"warning\" | \"error\";\n}\n\nexport interface AnalyticsMetrics {\n  totalExecutions: number;\n  successfulExecutions: number;\n  failedExecutions: number;\n  avgExecutionTime: number;\n  agentPerformance: Record<AgentType, {\n    tasksCompleted: number;\n    successRate: number;\n    avgDuration: number;\n  }>;\n  toolUsageStats: Record<string, {\n    count: number;\n    successRate: number;\n  }>;\n}\n","size_bytes":6192},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/theme-toggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"./theme-provider\";\n\nexport function ThemeToggle() {\n  const { theme, setTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={() => setTheme(theme === \"light\" ? \"dark\" : \"light\")}\n      data-testid=\"button-theme-toggle\"\n    >\n      <Sun className=\"h-5 w-5 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n      <Moon className=\"absolute h-5 w-5 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}\n","size_bytes":666},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"server/agents/base-agent.ts":{"content":"import OpenAI from \"openai\";\nimport type { AgentType } from \"@shared/schema\";\n\n// Reference: javascript_openai blueprint\n// Supports any OpenAI-compatible API (OpenAI, Ollama, LM Studio, Together AI, Groq, etc.)\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY || \"dummy-key\",\n  baseURL: process.env.OPENAI_BASE_URL || \"https://api.openai.com/v1\",\n});\n\n// Default model: gpt-4o-mini (fast and affordable)\n// Override with OPENAI_MODEL environment variable for custom models\nconst MODEL_NAME = process.env.OPENAI_MODEL || \"gpt-4o-mini\";\n\nexport interface AgentContext {\n  goal: string;\n  history: Array<{ agent: AgentType; action: string; result: any }>;\n  currentTask?: string;\n  availableTools: string[];\n}\n\nexport interface AgentResult {\n  success: boolean;\n  result?: any;\n  error?: string;\n  reasoning?: string;\n  toolsUsed?: string[];\n}\n\nexport abstract class BaseAgent {\n  protected name: AgentType;\n  protected systemPrompt: string;\n  protected tools: string[];\n\n  constructor(name: AgentType, systemPrompt: string, tools: string[] = []) {\n    this.name = name;\n    this.systemPrompt = systemPrompt;\n    this.tools = tools;\n  }\n\n  abstract execute(context: AgentContext): Promise<AgentResult>;\n\n  protected async callLLM(\n    messages: OpenAI.Chat.ChatCompletionMessageParam[],\n    options: Partial<OpenAI.Chat.ChatCompletionCreateParams> = {}\n  ): Promise<string> {\n    try {\n      const response = await openai.chat.completions.create({\n        model: MODEL_NAME,\n        messages: [\n          { role: \"system\", content: this.systemPrompt },\n          ...messages,\n        ],\n        max_completion_tokens: 8192,\n        stream: false,\n        ...options,\n      }) as OpenAI.Chat.ChatCompletion;\n\n      return response.choices[0].message.content || \"\";\n    } catch (error: any) {\n      throw new Error(`LLM call failed: ${error.message}`);\n    }\n  }\n\n  protected async callLLMWithFunctions(\n    messages: OpenAI.Chat.ChatCompletionMessageParam[],\n    functions: OpenAI.Chat.ChatCompletionCreateParams.Function[],\n    options: Partial<OpenAI.Chat.ChatCompletionCreateParams> = {}\n  ): Promise<any> {\n    try {\n      const response = await openai.chat.completions.create({\n        model: MODEL_NAME,\n        messages: [\n          { role: \"system\", content: this.systemPrompt },\n          ...messages,\n        ],\n        functions,\n        function_call: \"auto\",\n        max_completion_tokens: 8192,\n        stream: false,\n        ...options,\n      });\n      return response as OpenAI.Chat.ChatCompletion;\n    } catch (error: any) {\n      throw new Error(`LLM function call failed: ${error.message}`);\n    }\n  }\n\n  getName(): AgentType {\n    return this.name;\n  }\n\n  getTools(): string[] {\n    return this.tools;\n  }\n}\n","size_bytes":2742},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { orchestrator } from \"./agents/orchestrator\";\nimport { insertExecutionSchema } from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Create HTTP server\n  const httpServer = createServer(app);\n\n  // Reference: javascript_websocket blueprint\n  // Setup WebSocket server on /ws path to avoid conflicts with Vite HMR\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n\n  wss.on('connection', (ws) => {\n    console.log('WebSocket client connected');\n\n    ws.on('close', () => {\n      console.log('WebSocket client disconnected');\n    });\n\n    ws.on('error', (error) => {\n      console.error('WebSocket error:', error);\n    });\n  });\n\n  // Set WebSocket server for orchestrator\n  orchestrator.setWebSocketServer(wss);\n\n  // API Routes\n\n  // Create new execution\n  app.post(\"/api/executions\", async (req, res) => {\n    try {\n      const data = insertExecutionSchema.parse(req.body);\n\n      // Create execution record\n      const execution = await storage.createExecution({\n        goal: data.goal,\n        status: \"pending\",\n      });\n\n      // Start execution asynchronously with the created execution ID\n      orchestrator.executeGoal(execution.id, data.goal).catch((error) => {\n        console.error(\"Execution failed:\", error);\n      });\n\n      res.json(execution);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  // Get all executions\n  app.get(\"/api/executions\", async (req, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 50;\n      const executions = await storage.getAllExecutions(limit);\n      res.json(executions);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Get execution by ID\n  app.get(\"/api/executions/:id\", async (req, res) => {\n    try {\n      const execution = await storage.getExecution(req.params.id);\n      if (!execution) {\n        return res.status(404).json({ error: \"Execution not found\" });\n      }\n      res.json(execution);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Get tasks for execution\n  app.get(\"/api/executions/:id/tasks\", async (req, res) => {\n    try {\n      const tasks = await storage.getTasksByExecution(req.params.id);\n      res.json(tasks);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Get logs for execution\n  app.get(\"/api/executions/:id/logs\", async (req, res) => {\n    try {\n      const logs = await storage.getLogsByExecution(req.params.id);\n      res.json(logs);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Get analytics\n  app.get(\"/api/analytics\", async (req, res) => {\n    try {\n      const analytics = await storage.getAnalytics();\n      res.json(analytics);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  return httpServer;\n}\n","size_bytes":3185},"server/db.ts":{"content":"// Reference: javascript_database blueprint\nimport { Pool as NeonPool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle as drizzleNeon } from 'drizzle-orm/neon-serverless';\nimport { drizzle as drizzleNode } from 'drizzle-orm/node-postgres';\nimport { Pool as PgPool } from 'pg';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nconst isHeliumDatabase = process.env.DATABASE_URL.includes('helium');\n\nlet pool: NeonPool | PgPool;\nlet db: ReturnType<typeof drizzleNeon> | ReturnType<typeof drizzleNode>;\n\nif (isHeliumDatabase) {\n  pool = new PgPool({ \n    connectionString: process.env.DATABASE_URL,\n    ssl: false\n  });\n  db = drizzleNode({ client: pool, schema });\n} else {\n  neonConfig.webSocketConstructor = ws;\n  neonConfig.pipelineConnect = false;\n  pool = new NeonPool({ \n    connectionString: process.env.DATABASE_URL\n  });\n  db = drizzleNeon({ client: pool, schema });\n}\n\nexport { pool, db };\n","size_bytes":1060},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"server/agents/coder-agent.ts":{"content":"import { BaseAgent, type AgentContext, type AgentResult } from \"./base-agent\";\n\nexport class CoderAgent extends BaseAgent {\n  constructor() {\n    super(\n      \"coder\",\n      `You are an elite Coder Agent responsible for writing, debugging, and executing code.\n\nYour responsibilities:\n- Write clean, efficient code in various programming languages\n- Debug and fix code issues\n- Optimize code performance\n- Explain code functionality\n- Execute code and provide results\n\nWhen given a coding task, write production-quality code with proper error handling.\n\nOutput Format (JSON):\n{\n  \"reasoning\": \"Approach and code design decisions\",\n  \"code\": \"The actual code written\",\n  \"language\": \"Programming language used\",\n  \"execution_result\": \"Result of code execution (if applicable)\",\n  \"explanation\": \"Brief explanation of the code\"\n}\n\nWrite clean, well-documented code.`,\n      [\"code_execution\", \"debugging\"]\n    );\n  }\n\n  async execute(context: AgentContext): Promise<AgentResult> {\n    try {\n      const prompt = `Coding Task: ${context.currentTask}\n\nGoal Context: ${context.goal}\n\nWrite code to accomplish this task. Provide clean, production-quality code with explanations.\nIf execution is required, include the expected output.\n\nRespond with valid JSON only.`;\n\n      const response = await this.callLLM([\n        { role: \"user\", content: prompt },\n      ], {\n        response_format: { type: \"json_object\" },\n      });\n\n      const result = JSON.parse(response);\n\n      return {\n        success: true,\n        result: {\n          code: result.code,\n          language: result.language || \"javascript\",\n          execution_result: result.execution_result,\n          explanation: result.explanation,\n        },\n        reasoning: result.reasoning || \"Code written and tested\",\n        toolsUsed: [\"code_generator\", \"code_executor\"],\n      };\n    } catch (error: any) {\n      return {\n        success: false,\n        error: error.message,\n        reasoning: \"Failed to complete coding task\",\n      };\n    }\n  }\n}\n","size_bytes":2010},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/hooks/useWebSocket.ts":{"content":"import { useEffect, useRef, useState, useCallback } from 'react';\n\ninterface WebSocketOptions {\n  onMessage?: (data: any) => void;\n  onOpen?: () => void;\n  onClose?: () => void;\n  onError?: (error: Event) => void;\n  reconnectInterval?: number;\n  maxReconnectAttempts?: number;\n}\n\nexport function useWebSocket(url: string, options: WebSocketOptions = {}) {\n  const {\n    onMessage,\n    onOpen,\n    onClose,\n    onError,\n    reconnectInterval = 3000,\n    maxReconnectAttempts = 5,\n  } = options;\n\n  const [isConnected, setIsConnected] = useState(false);\n  const [reconnectCount, setReconnectCount] = useState(0);\n  const wsRef = useRef<WebSocket | null>(null);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout>();\n\n  const connect = useCallback(() => {\n    if (wsRef.current?.readyState === WebSocket.OPEN) {\n      return;\n    }\n\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}${url}`;\n    \n    const ws = new WebSocket(wsUrl);\n\n    ws.onopen = () => {\n      setIsConnected(true);\n      setReconnectCount(0);\n      onOpen?.();\n    };\n\n    ws.onmessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        onMessage?.(data);\n      } catch (error) {\n        console.error('Failed to parse WebSocket message:', error);\n      }\n    };\n\n    ws.onclose = () => {\n      setIsConnected(false);\n      onClose?.();\n\n      if (reconnectCount < maxReconnectAttempts) {\n        reconnectTimeoutRef.current = setTimeout(() => {\n          setReconnectCount(prev => prev + 1);\n          connect();\n        }, reconnectInterval);\n      }\n    };\n\n    ws.onerror = (error) => {\n      onError?.(error);\n    };\n\n    wsRef.current = ws;\n  }, [url, onMessage, onOpen, onClose, onError, reconnectCount, reconnectInterval, maxReconnectAttempts]);\n\n  const disconnect = useCallback(() => {\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n    }\n    wsRef.current?.close();\n    wsRef.current = null;\n    setIsConnected(false);\n  }, []);\n\n  const send = useCallback((data: any) => {\n    if (wsRef.current?.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify(data));\n    }\n  }, []);\n\n  useEffect(() => {\n    connect();\n    return () => {\n      disconnect();\n    };\n  }, [connect, disconnect]);\n\n  return { isConnected, send, disconnect, reconnect: connect };\n}\n","size_bytes":2405},"client/src/components/execution-timeline.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport type { Task } from \"@shared/schema\";\nimport { agentNames, getAgentColor, getRelativeTime } from \"@/lib/agent-utils\";\nimport { Clock, CheckCircle2, XCircle, Loader2, Circle } from \"lucide-react\";\n\ninterface ExecutionTimelineProps {\n  tasks: Task[];\n}\n\nexport function ExecutionTimeline({ tasks }: ExecutionTimelineProps) {\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"completed\":\n        return <CheckCircle2 className=\"h-4 w-4 text-green-500\" />;\n      case \"running\":\n        return <Loader2 className=\"h-4 w-4 text-blue-500 animate-spin\" />;\n      case \"failed\":\n        return <XCircle className=\"h-4 w-4 text-red-500\" />;\n      case \"cancelled\":\n        return <XCircle className=\"h-4 w-4 text-muted-foreground\" />;\n      default:\n        return <Circle className=\"h-4 w-4 text-muted-foreground\" />;\n    }\n  };\n\n  return (\n    <Card className=\"flex flex-col h-full\" data-testid=\"card-execution-timeline\">\n      <CardHeader className=\"border-b pb-4\">\n        <div className=\"flex items-center gap-2\">\n          <Clock className=\"h-4 w-4 text-muted-foreground\" />\n          <CardTitle className=\"text-base font-semibold\">Task Timeline</CardTitle>\n        </div>\n      </CardHeader>\n      <CardContent className=\"flex-1 p-0 overflow-hidden\">\n        <ScrollArea className=\"h-full\">\n          <div className=\"p-4\" data-testid=\"timeline-container\">\n            {tasks.length === 0 ? (\n              <div className=\"flex items-center justify-center h-32 text-muted-foreground text-sm\">\n                <p>No tasks yet</p>\n              </div>\n            ) : (\n              <div className=\"relative space-y-4\">\n                {/* Vertical line */}\n                <div className=\"absolute left-[11px] top-2 bottom-2 w-px bg-border\" />\n\n                {tasks.map((task, index) => {\n                  const agentColor = getAgentColor(task.agentType as any);\n\n                  return (\n                    <div key={task.id} className=\"relative pl-8\" data-testid={`task-${index}`}>\n                      {/* Timeline node */}\n                      <div className=\"absolute left-0 top-1\">\n                        {getStatusIcon(task.status)}\n                      </div>\n\n                      <div className=\"space-y-2 pb-4\">\n                        <div className=\"flex items-start justify-between gap-2\">\n                          <div className=\"flex items-center gap-2 flex-wrap\">\n                            <Badge\n                              variant=\"secondary\"\n                              className=\"text-xs\"\n                              style={{\n                                borderLeft: `3px solid ${agentColor}`,\n                              }}\n                            >\n                              {agentNames[task.agentType as any] || task.agentType}\n                            </Badge>\n                            <Badge\n                              variant=\"outline\"\n                              className=\"text-xs capitalize\"\n                              data-testid={`badge-task-status-${index}`}\n                            >\n                              {task.status}\n                            </Badge>\n                          </div>\n                          {task.createdAt && (\n                            <span className=\"text-xs text-muted-foreground whitespace-nowrap\">\n                              {getRelativeTime(new Date(task.createdAt))}\n                            </span>\n                          )}\n                        </div>\n\n                        <p className=\"text-sm\" data-testid={`text-task-description-${index}`}>\n                          {task.description}\n                        </p>\n\n                        {task.result && (\n                          <div className=\"mt-2 p-3 bg-muted/50 rounded-md text-xs\">\n                            <p className=\"text-muted-foreground mb-1\">Result:</p>\n                            <pre className=\"font-mono text-xs overflow-x-auto whitespace-pre-wrap\" data-testid={`text-task-result-${index}`}>\n                              {typeof task.result === 'string' \n                                ? task.result \n                                : JSON.stringify(task.result as any, null, 2)}\n                            </pre>\n                          </div>\n                        )}\n\n                        {task.error && (\n                          <div className=\"mt-2 p-3 bg-destructive/10 border border-destructive/20 rounded-md text-xs\">\n                            <p className=\"text-destructive font-medium mb-1\">Error:</p>\n                            <p className=\"text-destructive/80\" data-testid={`text-task-error-${index}`}>{task.error}</p>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </div>\n        </ScrollArea>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5162},"client/src/components/app-sidebar.tsx":{"content":"import { LayoutDashboard, BarChart3, History } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarHeader,\n} from \"@/components/ui/sidebar\";\n\nconst menuItems = [\n  {\n    title: \"Dashboard\",\n    url: \"/\",\n    icon: LayoutDashboard,\n    testId: \"link-dashboard\",\n  },\n  {\n    title: \"Analytics\",\n    url: \"/analytics\",\n    icon: BarChart3,\n    testId: \"link-analytics\",\n  },\n];\n\nexport function AppSidebar() {\n  const [location] = useLocation();\n\n  return (\n    <Sidebar>\n      <SidebarHeader className=\"border-b p-4\">\n        <div className=\"flex items-center gap-2\">\n          <div className=\"h-8 w-8 rounded-lg bg-primary flex items-center justify-center\">\n            <span className=\"text-primary-foreground font-bold text-sm font-[family-name:var(--font-display)]\">\n              RAJ\n            </span>\n          </div>\n          <div>\n            <h1 className=\"font-bold text-sm font-[family-name:var(--font-display)]\">\n              RAJGPT\n            </h1>\n            <p className=\"text-xs text-muted-foreground\">AI Orchestration</p>\n          </div>\n        </div>\n      </SidebarHeader>\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>Navigation</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {menuItems.map((item) => {\n                const Icon = item.icon;\n                const isActive = location === item.url;\n                \n                return (\n                  <SidebarMenuItem key={item.title}>\n                    <SidebarMenuButton asChild isActive={isActive}>\n                      <a href={item.url} data-testid={item.testId}>\n                        <Icon className=\"h-4 w-4\" />\n                        <span>{item.title}</span>\n                      </a>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                );\n              })}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n    </Sidebar>\n  );\n}\n","size_bytes":2175},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/metrics-cards.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Activity, CheckCircle2, XCircle, Clock } from \"lucide-react\";\n\ninterface MetricsCardsProps {\n  totalExecutions: number;\n  successfulExecutions: number;\n  failedExecutions: number;\n  avgExecutionTime: number;\n}\n\nexport function MetricsCards({\n  totalExecutions,\n  successfulExecutions,\n  failedExecutions,\n  avgExecutionTime,\n}: MetricsCardsProps) {\n  const successRate = totalExecutions > 0 \n    ? ((successfulExecutions / totalExecutions) * 100).toFixed(1)\n    : \"0.0\";\n\n  const metrics = [\n    {\n      title: \"Total Executions\",\n      value: totalExecutions,\n      icon: Activity,\n      color: \"text-blue-500\",\n      testId: \"metric-total\",\n    },\n    {\n      title: \"Successful\",\n      value: successfulExecutions,\n      icon: CheckCircle2,\n      color: \"text-green-500\",\n      subtitle: `${successRate}% success rate`,\n      testId: \"metric-successful\",\n    },\n    {\n      title: \"Failed\",\n      value: failedExecutions,\n      icon: XCircle,\n      color: \"text-red-500\",\n      testId: \"metric-failed\",\n    },\n    {\n      title: \"Avg. Duration\",\n      value: `${(avgExecutionTime / 1000).toFixed(1)}s`,\n      icon: Clock,\n      color: \"text-purple-500\",\n      testId: \"metric-duration\",\n    },\n  ];\n\n  return (\n    <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n      {metrics.map((metric) => {\n        const Icon = metric.icon;\n        return (\n          <Card key={metric.title} className=\"hover-elevate\" data-testid={`card-${metric.testId}`}>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n                {metric.title}\n              </CardTitle>\n              <Icon className={`h-4 w-4 ${metric.color}`} />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold font-mono\" data-testid={`text-${metric.testId}`}>\n                {metric.value}\n              </div>\n              {metric.subtitle && (\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  {metric.subtitle}\n                </p>\n              )}\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}\n","size_bytes":2309},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/agent-visualizer.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport type { AgentType, AgentState } from \"@shared/schema\";\nimport { agentNames, getAgentColor } from \"@/lib/agent-utils\";\nimport { Network } from \"lucide-react\";\n\ninterface AgentVisualizerProps {\n  agents: Record<AgentType, AgentState>;\n  currentAgent?: AgentType;\n}\n\nexport function AgentVisualizer({ agents, currentAgent }: AgentVisualizerProps) {\n  const agentTypes: AgentType[] = [\"planner\", \"executor\", \"researcher\", \"coder\", \"analyst\"];\n\n  return (\n    <Card className=\"h-full\" data-testid=\"card-agent-visualizer\">\n      <CardHeader className=\"border-b pb-4\">\n        <div className=\"flex items-center gap-2\">\n          <Network className=\"h-4 w-4 text-muted-foreground\" />\n          <CardTitle className=\"text-base font-semibold\">Agent Network</CardTitle>\n        </div>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        <div className=\"relative h-64 flex items-center justify-center\">\n          <svg className=\"absolute inset-0 w-full h-full\" viewBox=\"0 0 400 250\">\n            {/* Connection lines */}\n            <g className=\"opacity-20\">\n              {agentTypes.map((fromAgent, fromIndex) => {\n                return agentTypes.slice(fromIndex + 1).map((toAgent, toIndex) => {\n                  const fromPos = getAgentPosition(fromIndex, agentTypes.length);\n                  const toPos = getAgentPosition(fromIndex + toIndex + 1, agentTypes.length);\n                  \n                  return (\n                    <line\n                      key={`${fromAgent}-${toAgent}`}\n                      x1={fromPos.x}\n                      y1={fromPos.y}\n                      x2={toPos.x}\n                      y2={toPos.y}\n                      stroke=\"hsl(var(--border))\"\n                      strokeWidth=\"1\"\n                      strokeDasharray=\"4 4\"\n                    />\n                  );\n                });\n              })}\n            </g>\n\n            {/* Agent nodes */}\n            {agentTypes.map((agent, index) => {\n              const pos = getAgentPosition(index, agentTypes.length);\n              const agentColor = getAgentColor(agent);\n              const isActive = agents[agent]?.status === \"active\";\n              const isCurrent = currentAgent === agent;\n\n              return (\n                <g key={agent} transform={`translate(${pos.x}, ${pos.y})`}>\n                  {/* Pulse animation for active agent */}\n                  {isActive && (\n                    <circle\n                      r=\"25\"\n                      fill={agentColor}\n                      opacity=\"0.3\"\n                      className=\"animate-ping\"\n                      style={{ animationDuration: \"2s\" }}\n                    />\n                  )}\n\n                  {/* Main node circle */}\n                  <circle\n                    r=\"20\"\n                    fill={isCurrent ? agentColor : \"hsl(var(--card))\"}\n                    stroke={agentColor}\n                    strokeWidth={isCurrent ? \"3\" : \"2\"}\n                    className=\"transition-all duration-300\"\n                    opacity={isActive || isCurrent ? \"1\" : \"0.6\"}\n                  />\n\n                  {/* Status indicator dot */}\n                  <circle\n                    cx=\"12\"\n                    cy=\"-12\"\n                    r=\"4\"\n                    fill={\n                      agents[agent]?.status === \"active\"\n                        ? \"hsl(142 76% 45%)\"\n                        : agents[agent]?.status === \"error\"\n                        ? \"hsl(0 84% 60%)\"\n                        : \"hsl(222 8% 70%)\"\n                    }\n                    stroke=\"hsl(var(--card))\"\n                    strokeWidth=\"2\"\n                  />\n\n                  {/* Agent label */}\n                  <text\n                    y=\"40\"\n                    textAnchor=\"middle\"\n                    fill=\"hsl(var(--foreground))\"\n                    fontSize=\"11\"\n                    fontWeight=\"500\"\n                    className=\"font-sans\"\n                  >\n                    {agentNames[agent]}\n                  </text>\n                </g>\n              );\n            })}\n\n            {/* Data flow animation for current agent */}\n            {currentAgent && (\n              <AnimatedDataFlow\n                from={agentTypes.indexOf(currentAgent)}\n                to={(agentTypes.indexOf(currentAgent) + 1) % agentTypes.length}\n                total={agentTypes.length}\n                color={getAgentColor(currentAgent)}\n              />\n            )}\n          </svg>\n        </div>\n\n        {/* Legend */}\n        <div className=\"mt-6 flex items-center justify-center gap-4 text-xs text-muted-foreground\">\n          <div className=\"flex items-center gap-1\">\n            <div className=\"h-2 w-2 rounded-full bg-green-500\" />\n            <span>Active</span>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <div className=\"h-2 w-2 rounded-full bg-muted-foreground\" />\n            <span>Idle</span>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <div className=\"h-2 w-2 rounded-full bg-red-500\" />\n            <span>Error</span>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction getAgentPosition(index: number, total: number) {\n  const centerX = 200;\n  const centerY = 125;\n  const radius = 80;\n  const angle = (index * 2 * Math.PI) / total - Math.PI / 2;\n\n  return {\n    x: centerX + radius * Math.cos(angle),\n    y: centerY + radius * Math.sin(angle),\n  };\n}\n\nfunction AnimatedDataFlow({\n  from,\n  to,\n  total,\n  color,\n}: {\n  from: number;\n  to: number;\n  total: number;\n  color: string;\n}) {\n  const fromPos = getAgentPosition(from, total);\n  const toPos = getAgentPosition(to, total);\n\n  return (\n    <g>\n      <line\n        x1={fromPos.x}\n        y1={fromPos.y}\n        x2={toPos.x}\n        y2={toPos.y}\n        stroke={color}\n        strokeWidth=\"2\"\n        opacity=\"0.6\"\n      />\n      <circle r=\"3\" fill={color}>\n        <animateMotion\n          dur=\"1.5s\"\n          repeatCount=\"indefinite\"\n          path={`M ${fromPos.x} ${fromPos.y} L ${toPos.x} ${toPos.y}`}\n        />\n      </circle>\n    </g>\n  );\n}\n","size_bytes":6214},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/agent-status-card.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport type { AgentType, AgentStatus, AgentState } from \"@shared/schema\";\nimport { agentNames, agentDescriptions, getAgentColor, getStatusColor } from \"@/lib/agent-utils\";\nimport { Activity, CheckCircle2, XCircle, Loader2 } from \"lucide-react\";\n\ninterface AgentStatusCardProps {\n  agent: AgentType;\n  state: AgentState;\n}\n\nexport function AgentStatusCard({ agent, state }: AgentStatusCardProps) {\n  const agentColor = getAgentColor(agent);\n  const statusColor = getStatusColor(state.status);\n\n  const getStatusIcon = () => {\n    switch (state.status) {\n      case \"active\":\n        return <Loader2 className=\"h-4 w-4 animate-spin\" style={{ color: statusColor }} />;\n      case \"idle\":\n        return <Activity className=\"h-4 w-4\" style={{ color: statusColor }} />;\n      case \"error\":\n        return <XCircle className=\"h-4 w-4\" style={{ color: statusColor }} />;\n      case \"offline\":\n        return <div className=\"h-4 w-4 rounded-full bg-muted-foreground/30\" />;\n      default:\n        return null;\n    }\n  };\n\n  const successRate = state.performance?.successRate ?? 0;\n\n  return (\n    <Card className=\"hover-elevate relative overflow-visible border-l-4\" style={{ borderLeftColor: agentColor }} data-testid={`card-agent-${agent}`}>\n      <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n        <div className=\"flex items-center gap-2\">\n          <div className=\"flex items-center gap-2\">\n            {getStatusIcon()}\n            <CardTitle className=\"text-base font-semibold font-[family-name:var(--font-display)]\">\n              {agentNames[agent]}\n            </CardTitle>\n          </div>\n          <Badge \n            variant=\"secondary\" \n            className=\"text-xs capitalize\"\n            data-testid={`badge-status-${agent}`}\n          >\n            {state.status}\n          </Badge>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <CardDescription className=\"text-xs\">\n          {agentDescriptions[agent]}\n        </CardDescription>\n\n        {state.currentTask && (\n          <div className=\"space-y-1\">\n            <p className=\"text-xs text-muted-foreground\">Current Task</p>\n            <p className=\"text-sm font-medium line-clamp-2\" data-testid={`text-current-task-${agent}`}>\n              {state.currentTask}\n            </p>\n          </div>\n        )}\n\n        {state.lastAction && (\n          <div className=\"space-y-1\">\n            <p className=\"text-xs text-muted-foreground\">Last Action</p>\n            <p className=\"text-xs text-muted-foreground/80 line-clamp-1\" data-testid={`text-last-action-${agent}`}>\n              {state.lastAction}\n            </p>\n          </div>\n        )}\n\n        {state.performance && (\n          <div className=\"space-y-3 pt-2 border-t\">\n            <div className=\"flex items-center justify-between text-xs\">\n              <span className=\"text-muted-foreground\">Performance</span>\n              <span className=\"font-mono font-medium\" data-testid={`text-performance-${agent}`}>\n                {successRate.toFixed(0)}%\n              </span>\n            </div>\n            <Progress value={successRate} className=\"h-1\" style={{ \n              ['--progress-background' as any]: agentColor \n            }} />\n            <div className=\"grid grid-cols-2 gap-2 text-xs\">\n              <div>\n                <p className=\"text-muted-foreground\">Completed</p>\n                <p className=\"font-mono font-medium\" data-testid={`text-tasks-completed-${agent}`}>\n                  {state.performance.tasksCompleted}\n                </p>\n              </div>\n              <div>\n                <p className=\"text-muted-foreground\">Avg. Duration</p>\n                <p className=\"font-mono font-medium\" data-testid={`text-avg-duration-${agent}`}>\n                  {(state.performance.avgDuration / 1000).toFixed(1)}s\n                </p>\n              </div>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4176},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"server/agents/orchestrator.ts":{"content":"import { PlannerAgent } from \"./planner-agent\";\nimport { ExecutorAgent } from \"./executor-agent\";\nimport { ResearcherAgent } from \"./researcher-agent\";\nimport { CoderAgent } from \"./coder-agent\";\nimport { AnalystAgent } from \"./analyst-agent\";\nimport { storage } from \"../storage\";\nimport type { AgentType, Execution, Task } from \"@shared/schema\";\nimport type { AgentContext, AgentResult } from \"./base-agent\";\nimport type { WebSocketServer } from \"ws\";\nimport WebSocket from \"ws\";\n\nexport class Orchestrator {\n  private agents: Map<AgentType, any>;\n  private wss: WebSocketServer | null = null;\n\n  constructor() {\n    this.agents = new Map();\n    this.agents.set(\"planner\", new PlannerAgent());\n    this.agents.set(\"executor\", new ExecutorAgent());\n    this.agents.set(\"researcher\", new ResearcherAgent());\n    this.agents.set(\"coder\", new CoderAgent());\n    this.agents.set(\"analyst\", new AnalystAgent());\n  }\n\n  setWebSocketServer(wss: WebSocketServer) {\n    this.wss = wss;\n  }\n\n  private broadcast(message: any) {\n    if (!this.wss) return;\n\n    const data = JSON.stringify(message);\n    this.wss.clients.forEach((client) => {\n      if (client.readyState === WebSocket.OPEN) {\n        client.send(data);\n      }\n    });\n  }\n\n  async executeGoal(executionId: string, goal: string): Promise<Execution> {\n    let execution: Execution;\n\n    try {\n      execution = await storage.updateExecution(executionId, {\n        status: \"planning\",\n      });\n\n      this.broadcast({\n        type: \"execution_update\",\n        payload: {\n          executionId: execution.id,\n          status: \"planning\",\n          timestamp: Date.now(),\n        },\n      });\n\n      const history: Array<{ agent: AgentType; action: string; result: any }> = [];\n\n      await this.createLog(execution.id, \"planner\", \"Starting execution planning\", {\n        level: \"info\",\n      });\n\n      this.broadcast({\n        type: \"execution_update\",\n        payload: {\n          executionId: execution.id,\n          status: \"planning\",\n          currentAgent: \"planner\",\n          timestamp: Date.now(),\n        },\n      });\n\n      const plannerAgent = this.agents.get(\"planner\");\n      const planResult = await plannerAgent.execute({\n        goal,\n        history,\n        availableTools: [],\n      });\n\n      if (!planResult.success) {\n        throw new Error(planResult.error || \"Planning failed\");\n      }\n\n      await this.createLog(\n        execution.id,\n        \"planner\",\n        \"Created execution plan\",\n        { level: \"success\" },\n        { input: { goal }, output: planResult.result }\n      );\n\n      const tasks: Task[] = [];\n      for (let i = 0; i < planResult.result.length; i++) {\n        const taskDef = planResult.result[i];\n        const task = await storage.createTask({\n          executionId: execution.id,\n          agentType: taskDef.agentType,\n          description: taskDef.description,\n          status: \"pending\",\n          order: i,\n        });\n        tasks.push(task);\n\n        this.broadcast({\n          type: \"task_update\",\n          payload: task,\n        });\n      }\n\n      await storage.updateExecution(execution.id, { status: \"executing\" });\n\n      this.broadcast({\n        type: \"execution_update\",\n        payload: {\n          executionId: execution.id,\n          status: \"executing\",\n          timestamp: Date.now(),\n        },\n      });\n\n      for (const task of tasks) {\n        await this.executeTask(execution, task, history);\n      }\n\n      const analystAgent = this.agents.get(\"analyst\");\n      const analysisResult = await analystAgent.execute({\n        goal,\n        history,\n        currentTask: \"Analyze all results and create final summary\",\n        availableTools: [],\n      });\n\n      await this.createLog(\n        execution.id,\n        \"analyst\",\n        \"Final analysis completed\",\n        { level: \"success\" },\n        { input: { history }, output: analysisResult.result }\n      );\n\n      execution = await storage.updateExecution(execution.id, {\n        status: \"completed\",\n        completedAt: new Date(),\n        result: analysisResult.result,\n      });\n\n      this.broadcast({\n        type: \"execution_update\",\n        payload: {\n          executionId: execution.id,\n          status: \"completed\",\n          timestamp: Date.now(),\n        },\n      });\n\n      return execution;\n    } catch (error: any) {\n      console.error(\"Execution error:\", error);\n\n      if (execution!) {\n        execution = await storage.updateExecution(execution!.id, {\n          status: \"failed\",\n          completedAt: new Date(),\n          error: error.message,\n        });\n\n        this.broadcast({\n          type: \"execution_update\",\n          payload: {\n            executionId: execution.id,\n            status: \"failed\",\n            error: error.message,\n            timestamp: Date.now(),\n          },\n        });\n      }\n\n      throw error;\n    }\n  }\n\n  private async executeTask(\n    execution: Execution,\n    task: Task,\n    history: Array<{ agent: AgentType; action: string; result: any }>\n  ): Promise<void> {\n    try {\n      const agent = this.agents.get(task.agentType as AgentType);\n      if (!agent) {\n        throw new Error(`Agent ${task.agentType} not found`);\n      }\n\n      await storage.updateTask(task.id, {\n        status: \"running\",\n        startedAt: new Date(),\n      });\n\n      this.broadcast({\n        type: \"task_update\",\n        payload: await storage.getTask(task.id),\n      });\n\n      this.broadcast({\n        type: \"execution_update\",\n        payload: {\n          executionId: execution.id,\n          status: \"executing\",\n          currentAgent: task.agentType as AgentType,\n          currentTask: task.description,\n          timestamp: Date.now(),\n        },\n      });\n\n      await this.createLog(\n        execution.id,\n        task.agentType as AgentType,\n        `Executing: ${task.description}`,\n        { level: \"info\" },\n        undefined,\n        task.id\n      );\n\n      const context: AgentContext = {\n        goal: execution.goal,\n        history,\n        currentTask: task.description,\n        availableTools: agent.getTools(),\n      };\n\n      const result: AgentResult = await agent.execute(context);\n\n      if (result.toolsUsed) {\n        for (const tool of result.toolsUsed) {\n          await storage.createToolUsage({\n            executionId: execution.id,\n            taskId: task.id,\n            toolName: tool,\n            input: { task: task.description },\n            output: result.result,\n            success: result.success,\n          });\n        }\n      }\n\n      if (result.success) {\n        await storage.updateTask(task.id, {\n          status: \"completed\",\n          completedAt: new Date(),\n          result: result.result,\n        });\n\n        await this.createLog(\n          execution.id,\n          task.agentType as AgentType,\n          `Completed: ${task.description}`,\n          { level: \"success\" },\n          { output: result.result },\n          task.id\n        );\n\n        history.push({\n          agent: task.agentType as AgentType,\n          action: task.description,\n          result: result.result,\n        });\n      } else {\n        await storage.updateTask(task.id, {\n          status: \"failed\",\n          completedAt: new Date(),\n          error: result.error,\n        });\n\n        await this.createLog(\n          execution.id,\n          task.agentType as AgentType,\n          `Failed: ${task.description}`,\n          { level: \"error\" },\n          { error: result.error },\n          task.id\n        );\n      }\n\n      const performanceData = await this.calculateAgentPerformance(task.agentType as AgentType);\n      this.broadcast({\n        type: \"agent_performance\",\n        payload: {\n          agentType: task.agentType,\n          performance: performanceData,\n        },\n      });\n\n      this.broadcast({\n        type: \"task_update\",\n        payload: await storage.getTask(task.id),\n      });\n    } catch (error: any) {\n      await storage.updateTask(task.id, {\n        status: \"failed\",\n        completedAt: new Date(),\n        error: error.message,\n      });\n\n      await this.createLog(\n        execution.id,\n        task.agentType as AgentType,\n        `Error: ${error.message}`,\n        { level: \"error\" },\n        { error: error.message },\n        task.id\n      );\n\n      throw error;\n    }\n  }\n\n  private async createLog(\n    executionId: string,\n    agentType: AgentType,\n    action: string,\n    metadata: any = {},\n    details: any = {},\n    taskId?: string\n  ): Promise<void> {\n    const log = await storage.createAgentLog({\n      executionId,\n      taskId,\n      agentType,\n      action,\n      input: details.input,\n      output: details.output,\n      reasoning: details.reasoning,\n      metadata,\n    });\n\n    this.broadcast({\n      type: \"log\",\n      payload: { ...log, level: metadata.level || \"info\" },\n    });\n  }\n\n  private async calculateAgentPerformance(agentType: AgentType): Promise<any> {\n    const analytics = await storage.getAnalytics();\n    const performance = analytics.agentPerformance?.[agentType];\n\n    if (performance) {\n      return {\n        tasksCompleted: performance.tasksCompleted,\n        successRate: performance.successRate,\n        avgDuration: performance.avgDuration,\n      };\n    }\n\n    return {\n      tasksCompleted: 0,\n      successRate: 0,\n      avgDuration: 0,\n    };\n  }\n}\n\nexport const orchestrator = new Orchestrator();\n","size_bytes":9347},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"server/agents/analyst-agent.ts":{"content":"import { BaseAgent, type AgentContext, type AgentResult } from \"./base-agent\";\n\nexport class AnalystAgent extends BaseAgent {\n  constructor() {\n    super(\n      \"analyst\",\n      `You are an elite Analyst Agent responsible for processing data, generating insights, and creating comprehensive summaries.\n\nYour responsibilities:\n- Analyze data from previous tasks\n- Generate actionable insights\n- Create comprehensive summaries\n- Identify patterns and trends\n- Provide recommendations\n\nWhen given an analysis task, provide deep insights with clear recommendations.\n\nOutput Format (JSON):\n{\n  \"reasoning\": \"Analysis methodology and approach\",\n  \"insights\": [\n    {\n      \"finding\": \"Key insight discovered\",\n      \"significance\": \"Why this matters\",\n      \"recommendation\": \"Suggested action\"\n    }\n  ],\n  \"summary\": \"Executive summary of analysis\",\n  \"conclusion\": \"Final conclusions and recommendations\"\n}\n\nProvide thorough, data-driven analysis.`,\n      [\"data_analysis\", \"insight_generation\"]\n    );\n  }\n\n  async execute(context: AgentContext): Promise<AgentResult> {\n    try {\n      const historyContext = context.history\n        .map((h) => `${h.agent}: ${JSON.stringify(h.result)}`)\n        .join(\"\\n\");\n\n      const prompt = `Analysis Task: ${context.currentTask}\n\nGoal Context: ${context.goal}\n\nPrevious Task Results:\n${historyContext}\n\nAnalyze all available information and provide comprehensive insights, patterns, and recommendations.\n\nRespond with valid JSON only.`;\n\n      const response = await this.callLLM([\n        { role: \"user\", content: prompt },\n      ], {\n        response_format: { type: \"json_object\" },\n      });\n\n      const result = JSON.parse(response);\n\n      return {\n        success: true,\n        result: {\n          insights: result.insights || [],\n          summary: result.summary || \"Analysis completed\",\n          conclusion: result.conclusion || \"\",\n        },\n        reasoning: result.reasoning || \"Analysis performed\",\n        toolsUsed: [\"analysis_engine\"],\n      };\n    } catch (error: any) {\n      return {\n        success: false,\n        error: error.message,\n        reasoning: \"Failed to complete analysis\",\n      };\n    }\n  }\n}\n","size_bytes":2173},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741}},"version":2}